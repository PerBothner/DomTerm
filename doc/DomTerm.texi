\input texinfo.tex      @c -*-texinfo -*-
@c %**start of header
@setfilename domterm.info
@documentencoding UTF-8
@settitle DomTerm - a terminal emulator and console using DOM and JavaScript

@contents

@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex pg cp
@codequoteundirected on
@codequotebacktick on

@macro mux-prefix
Ctrl-Shift-A
@end macro


@titlepage
@title DomTerm - a terminal emulator and console using DOM and JavaScript
@end titlepage

@node Top
@top DomTerm

DomTerm is an terminal emulator based on web technologies.
Beyond solid xterm compatibility, it supports
powerful features for REPL (read-eval-print-loop) consoles:
Application output can have images, rich text, and links,
with structure-based line-breaking (pretty-printing), and folding.
There is also input editing; automatic paging;
screen multiplexing (panes and tabs); and session management
(like @code{tmux} or GNU @code{screen}).

@emph{}
@uref{images/domterm-panes-1.png,@image{images/domterm-panes-1}}

This @uref{https://opensource.com/article/18/1/introduction-domterm-terminal-emulator, OpenSource.com article} provides an overview of the functionality.
This @uref{https://lwn.net/Articles/670062/,old LWN article} provides
background, motivation, and a summary of the functionality.

The @code{domterm} command runs a server that manages
sessions (usually shell processes).
The user interface and terminal emulation
is handled by a JavaScript library
that can run in a regular web browser or an embedded browser such as Electron,
using Web Sockets to talk to the server.

The name ``DomTerm'' refers to how it  works by manipulating the
@uref{https://en.wikipedia.org/wiki/Document_Object_Model,Document Object Model (DOM)} of a browser:
the nested structure of elements, text, and attributes.

DomTerm is Free Software (open-source)
available at @uref{https://github.com/PerBothner/DomTerm,https://github.com/PerBothner/DomTerm}.

There is a mailing list at @email{domterm-discuss@@domterm.org}
with an @uref{http://lists.domterm.org/listinfo.cgi/domterm-discuss-domterm.org,information page}
and @uref{http://lists.domterm.org/pipermail/domterm-discuss-domterm.org/,archives}.

@subheading Highlights and recent changes

@emph{}@image{images/domterm-1}
@itemize
@item
@uref{https://en.wikipedia.org/wiki/Sixel,@strong{Sixel graphics}} is now supported.
@item
The @code{domterm} command takes multiple sub-commands,
similar to how @code{tmux} or @code{git}.
The command automatically starts server if not already running.
@item
@ref{Sessions and Windows,Session management}, with detachable sessions, as in
@code{tmux} or GNU @code{screen}.
@item
An experimental package @uref{https://github.com/PerBothner/atom-domterm,atom-domterm} for the @uref{https://atom.io/,Atom editor} is available.
@item
A front-end based on @uref{https://electron.atom.io/,Electron}
is now the preferred one.
@item
We now support draggable tabs and panes.
@item
An experimental @ref{Paging,pager} with optional
automatic pause on each page.
@item
The preferred ``backend` is now @uref{https://libwebsockets.org/,libwebsockets}.
This is light-weight, does not require Java, is actively maintained,
and enables serving http and the WebSockets on the same port.
@item
Support for CJK (Chinese, Japanese, and Korean) characters is improved:
Double-width characters now really are two columns wide.
@end itemize

@menu
* Features:: Features and screenshots
* Downloading and building::
* domterm application:: The domterm command
* Settings:: The settings.ini file
* Applications:: Other domterm applications
* Frontends:: Frontends including browsers
* Remote serving::
* Sessions and Windows::
* Input line editing::
* Paging:: Paging and Pausing
* Styling::
* Keyboard shortcuts::
* Tips and solutions::
* Java tools::
* Uses:: Projects using DomTerm
* To do:: Ideas and projects for DomTerm
* Technical documentation::
* Credits:: Credits and thanks
@end menu

@node Features
@chapter Features and screenshots

The goal of DomTerm is to be both a great terminal emulator
as well as great environment for @uref{https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop,REPLs}.

@c The goal of this project is to combine two related but
@c separate tools: a terminal emulator, and a rich-text console,
@c and do it properly.

@c There are many terminal emulators, including quite a few written in JavaScript.
@c However, they generally work with a rectangular grid of characters,
@c and don't integrate rich text (images, math, variable-width text,
@c variable-length lines, interaction) well.

@c There are also various tools designed for REPL-style interaction,
@c chat clients, etc. Examples include @uref{http://ipython.org/,IPython}
@c or the the JavaScript console of a web browser.
@c However, they don't work as terminal emulators, or at best have
@c limited functonality or require switching modes.

@c For rich text applications it seems obvious to use web technologies:
@c DOM and JavaScript.

@c One goal of this project is a stand-alone terminal emulator application
@c that techies can use as a day-to-day terminal emulator, and that also
@c seamlessly provides support for rich text and interaction. That means
@c an embedded web engine.

@c The core of the project is a JavaScript package that can be used and
@c embedded in different modes and applications.

This @uref{https://opensource.com/article/18/1/introduction-domterm-terminal-emulator, OpenSource.org article} provides an overview of DomTerm's functionality.
(It should be merged into the following.)

@c @c The @emph is a dummy to force the @image inside a paragraph
@c @emph{}

@subheading Full-featured terminal emulator

@float
@image{images/domterm-2,,,DomTerm window running mc (Midnight Commander)}
@caption{@b{Figure 1:} Running Midnight Commander}
@end float

DomTerm includes the functionality what you'd expect from modern
terminal-emulator.
@itemize @bullet
@item
It uses an extended @uref{https://invisible-island.net/xterm/,xterm}
protocol, and sets the @code{TERM=xterm-256color} environment variable,
like other modern terminal emulators.
DomTerm does very well on
the @uref{http://invisible-island.net/vttest/,@code{vttest}} terminal test program,
including handling Background Color Erase.
@item
Standard @strong{mouse event handling}.
@item
Supports @strong{24-bit color} (truecolor).
@item
Handles @strong{Unicode}.
Good @strong{CJK} (Chinese, Japanese, Korean) support:
@strong{double-width characters (including Emoiji)} really are two columns wide.
@item
Remembers @strong{tab characters} so copying selected output
will contain the tab character.
@item
Support for using @strong{Input Methods}.
@item
Resizing the window re-flows long output lines.
@item
Makes URls and file names into clickable links.
Also supports an explicit hyperlink escape sequence.
@end itemize

Here you see the @code{mc} (Midnight Commander) file browser
running in the stand-alone DomTerm application.
Emacs (shown later) and GNU readline also work well.

@subheading Rich output and images

@image{images/domterm-polygon-1}

A back-end @strong{can ``print'' images, graphics, and rich text}.
Here you can see evaluating and ``printing''
@code{Paintable} objects, which are graphical objects such as
filled polygons.
from the @uref{http://www.gnu.org/software/kawa/,Kawa} REPL.

The front page screenshot shows ``printing'' HTML for images and rich text.
(The expressions starting with @code{#<} are
@uref{http://www.gnu.org/software/kawa/XML-literals.html,XML literals},
which evaluate to @code{Element} objects. ``Printing'' an @code{Element}
inserts its HTML representation in the DomTerm output.)

The image later (with the yellow circle) shows printing
@uref{https://en.wikipedia.org/wiki/Scalable_Vector_Graphics,SVG}.

@subsubheading Sixel graphics

@image{images/dt-sixel}

You can directly print
@uref{https://en.wikipedia.org/wiki/Sixel,@strong{Sixel images}},
which is an encoding that some DEC VT terminals supported..

@subsubheading Help and other documentation

@image{images/dt-help1}

Displaying inline HTML is very useful for ``help'' output
and other documentation,
such as @ref{pandoc-output,output from pandoc}
and @ref{man-page-output,@code{man} pages}.

The @code{domterm hcat} command
is useful for @strong{printing formatted html}.
The @code{domterm help @var{topic}} command essentially does that.

@subsubheading Python language

@image{images/pyplot}

If you use the Python language,
check out these @ref{Python tips} with more screenshots.

@subsubheading Gnuplot

@image{images/dt-gnuplot1}

The @uref{http://www.gnuplot.info/,GnuPlot graphing utility} (version 5.1+)
supports @uref{http://per.bothner.com/blog/2016/gnuplot-in-domterm/,DomTerm as an output device}.

@subheading Rich interaction

@subsubheading Pretty-printing

@uref{https://domterm.org/saved/dt-prettynested.html,@image{images/dt-pretty1}}
If you click on the image to right,
you get a @strong{dynamic saved page}:
If you resize the screen, the line-breaks in the output
are adjusted to pretty-print the data structures to fit the
available width.  You can also show or hide output by clicking
on the triangles.

@strong{Smart line-wrapping}:
Remembers which lines were too wide (and thus
were wrapped).
The default style add markers to show when wrapping occurred,
as seen in the nearby screenshot.
Window size re-size will automatically re-do line-breaking.
Copying the selection as text will only include hard newlines.
Reports window resize to application.
@uref{http://per.bothner.com/blog/2017/dynamic-prettyprinting/,@strong{Dynamic pretty-printing}} (Common Lisp style) uses special commands to group
logical blocks, and attempts to keep the text of a block on a single line
with automatic re-flow on window re-size.

@subsubheading Show/Hide buttons

``Print'' @ref{Hide/show buttons,hide/show buttons},
using certain escape sequences enables @strong{text folding}.
The nearby screenshot shows the output of @code{ls -l} being hidden.

@subsubheading Smart links

@ref{linkification,Turn URLs and mail adresses in output into links}.
Filename with line number (as in errors messages) are turned into
links for text editors.
(You have to hover over them to see them.)

You can @ref{link-handlers,customize how links are handled}.

@subsubheading Update previous output

An application can print some HTML in an area of the output, and
attach a key string to it.  Later, that area can be updated (replaced),
just by specifing the key, without cursor navigation.

@subheading Choose your front-end

@image{images/emacs-in-firefox-1}

@image{images/dt-atom1}

Most of DomTerm is written in JavaScript and runs in a browser engine.
This can be a desktop web browser, such as Chrome or Firefox, or it can be an embedded browser.
Using a general web browser works fine, but the user experience
isn't quite as nice, and the security model gets in the way,
so using an embedded browser is recommended.

The following are currently supported:
@itemize @bullet
@item
A generic modern (HTML5) browser - both Firefox and Chrome are regularly tested.
(Shown is Emacs running a Firefox broser window.)
@item
qtdomterm, which uses the @uref{ttps://www.qt.io,Qt toolkit} and QtWebEngine.
@item
An @uref{https://electronjs.org/,Electron} embedding.
@item
@code{atom-domterm} runs DomTerm as a package in the
@uref{https://atom.io/,Atom text editor} (which is also based on Electron)
and integrates with the Atom pane system.
(See image.)
@item
A wrapper for JavaFX's WebEngine, which is useful for code written in Java
@item
Previously, the preferred frontend used Firefox-XUL, but Mozilla has since dropped XUL
@end itemize

Currently, both the Electron and Qt frontends are quite nice
and recommended.

@subheading Panes and tabs

A DomTerm window can be sub-divided into panes, each of which
can have multiple tabs.  You can create new panes with a domterm sub-command
(like @code{domterm --below new}), a menu button, or a
keyboard shortcut (like @kbd{@mux-prefix Ctrl-@key{Down}}).

If using @code{atom-domterm} the above commands create a new
Atom pane instead.

@subheading Shell/REPL integration

@uref{images/dt-fish1.png,@image{images/dt-fish1}}

If you use a shell or other interactive REPL program with a
settable prompt string, inserting special
@uref{https://gitlab.freedesktop.org/Per_Bothner/specifications/blob/master/proposals/semantic-prompts.md,escape sequences}
in the prompt enables some useful features.

@itemize @bullet
@item
Visual separation between commands.
The default styling that you can see in most of the screenshots
has a thin light green line between commands,
and a light beige for the input lines.
The is meant to be clear though unobstrusive while not wasting screen space.
@item
Distinct (user-settable) styling for prompt (light green) and user input (light yellow),
including support for secondary (continuation) and right-margin prompts.
@item
Show error indication (a red disk in the right gutter) if a command returns an error code:
If you hover the mouse over the red disk you will see the specific exit code.
@item
Hide/show buttons: If you click on the downward-pointing rectangle
in the right gutter, the following input and output of the command are hidden.
(See the @code{ls -l Makefile*} command in teh screenshot.)
@item
Clicking the mouse in the input line moves the input cursor.
(Implemented by DomTerm sending the appropriate number of arrow keys.)
@item
Integration with selection and clipboard: If you press shift while using the
arrow keys, the moved-over text becomes the current selection.
@end itemize

See @uref{http://per.bothner.com/blog/2019/shell-integration-proposal/,this article} for more discussion and screenshots.

Optional @strong{input editing}.  In @dfn{character mode},
each character is sent to the application, like a traditional terminal.
In @dfn{line mode}, the browser @ref{Input line editing,does the editing},
and sends the input line to the back-end when Enter is typed.
A history of previous lines is available, accessible
with the Up/Down arrow keys.
@dfn{Automatic mode} switches between character mode and line mode
depending on whether the back-end is in ``@uref{http://www.gnu.org/software/libc/manual/html_node/Canonical-or-Not.html,canonical mode}''.

@subheading Miscelleanous

User @strong{preferences are controlled a CSS stylesheet},
which can be changed by an application.

@strong{Uses a byte-protocol} to communicate with the back-end,
so can run in a browser (using web sockets);
be embedded in an application;
or run as a standard terminal emulator application.

@uref{images/domterm-sh-svg.png,@image{images/domterm-sh-svg}}

Maintains @strong{a clean DOM structure}, and thus @strong{clean HTML export}.
Text selections generally give you what you expect.

@strong{Move cursor using mouse},
@ref{move-cursor-with-mouse,even for mouse-unaware programs}.
Mouse clicks are translated to arrow-key characters.

Optional @strong{automatic pagination}.

@strong{Predictive echo} (similar to @code{mosh}), which is
useful for slow connections.
Nicer @ref{password-fields, @strong{password fields}}.

@node Downloading and building
@chapter Downloading and building

@subheading Getting the DomTerm source code

The sources are in
a @uref{https://github.com/PerBothner/DomTerm,GitHub repository}.
To download the sources do:
@example
git clone https://github.com/PerBothner/DomTerm
@end example

Alternatively, it may be easier to grab one of the sporadic
@uref{https://github.com/PerBothner/DomTerm/releases,releases}.
A file named @code{domterm-@var{version}.tar.gz} is a GNU-style release;
it includes some generated files (such as the @code{configure} script),
for convenience.
A file named @code{domterm-@var{version}-wsl.zip} contains
compiled installable files for WSL (Windows Subsystem for Linux).

@subheading Prerequisites

Please help out with instructions for other platforms, especially
MacOS, *BSD, and native (non-WSL) Windows.

@subsubheading Fedora

On Fedora, you need to first:
@example
sudo dnf install gcc make automake autoconf texinfo patch libwebsockets libwebsockets-devel json-c json-c-devel openssl-devel file-devel libcap-devel asciidoctor zlib-devel
@end example
If configuring @code{--with-qtwebengine} (recommended), also do:
@example
sudo dnf install gcc-c++ qt5-qtbase-devel qt5-qtwebengine-devel qt5-qtwebchannel-devel
@end example
If configuring with @code{--enable-compiled-in-resources} (for @code{xxd} - only needed at build time):
@example
sudo dnf install vim-common
@end example
For Java classes, do:
@example
sudo dnf install java-1.8.0-openjdk-devel
@end example
(You can also use Oracle JDK, version 8 or 9.)

If configuring with @code{--with-closure-compiler} do:
@example
sudo dnf install closure-compiler
@end example

@subsubheading Ubuntu/Debian

(Tested on Ubuntu 17.10.1)

You need to install the following prerequisites:
@example
sudo apt-get install git gcc make automake libjson-c-dev pkg-config asciidoctor libmagic-dev zlib1g-dev
@end example
If configuring @code{--with-qtwebengine} (recommended), also do:
@example
sudo apt-get install qt5-qmake qt5-default libqt5webengine5 libqt5webchannel5-dev qtwebengine5-dev
@end example

In the future you should be able to do @code{apt-get install libwebsockets-dev}, but at the time of writing the available package is too old,
so you have to build libwebsockets from source - see below.

If you need to build libwebsockets from source:
@example
sudo apt-get install cmake
@end example

@subsubheading Windows using WSL (Linux for Windows)

For building from source on WSL (Windows Subsystem for  Linux)
see the @ref{building-on-WSL,instructions below}.

@anchor{wsl-binary-release}
Alternatively, you can use of the pre-compiled
@uref{https://github.com/PerBothner/DomTerm/releases,releases}.
Download @code{domterm-@var{version}-wsl.zip}.
Then create a directory on a Windows partition, @code{cd} to it,
and @code{unzip} the downloaded file into the partition.
For example (assuming your Windows user name is @code{@var{wuser}}):
@example
cd /mnt/c/@var{wuser}
mkdir DomTerm
cd DomTerm
unzip /mnt/c/User/wuser/Downloads/domterm-@var{version}-wsl.zip
@end example

These library dependencies are needed:
@example
apt-get install libjson-c2 libmagic1 zlib1g
@end example

Optionally you can create a symlink for @code{domterm}:
@example
cd ~/bin
ln -s /mnt/c/@var{wuser}/DomTerm/bin/domterm domterm
@end example

@ref{installing-electron,Installing Electron} is highly recommended.

@subsubheading  MacOS (using Homebrew)

@example
brew install automake
brew install json-c
brew install libwebsockets
brew install asciidoctor
@end example

There are some issues about openssl that I'm not clear about.
A reported work-around is to do:
@example
export LDFLAGS="-L/usr/local/opt/openssl/lib -L/usr/local/lib -L/usr/local/opt/expat/lib"
export CFLAGS="-I/usr/local/opt/openssl/include/ -I/usr/local/include -I/usr/local/opt/expat/include"
export CPPFLAGS="-I/usr/local/opt/openssl/include/ -I/usr/local/include -I/usr/local/opt/expat/include"
@end example

A cleaner solution/fix would be welcome.

@subsubheading Building libwebsockets, if needed

The @code{domterm} server requires libwebsockets version 2.2
or newer.  As of January 2018, the version in Fedora 27 in fine,
but the version in Ubuntu is too old.
If you need to build libwebsockets from source, do the following:

@example
cd $WORKDIR
git clone https://github.com/warmcat/libwebsockets
cd libwebsockets
mkdir build
cd build
cmake -DLWS_WITH_SSL=0 -DLWS_WITH_ZIP_FOPS=1 ..
@end example
The @code{-D} options are suggested but not required:
@code{-DLWS_WITH_SSL=0} avoids a dependency on OpenSSL;
while @code{-DLWS_WITH_ZIP_FOPS=1} is required if configuring
with @code{--disable-compiled-in-resources} (the default).

Finally:
@example
make
@end example

When running @code{./configure} in the @code{DomTerm} sources,
specify @code{--with-libwebsockets=$WORKDIR/libwebsockets/build}.

@anchor{installing-electron}
@subsubheading Optional: Electron

The Electron framework provides a nicer domterm front-end
than a regular web browser.  It is similar to using qtdomterm,
but it is easier to install electron on platforms that don't have
qt/qtwebengine packages easily available.

Grab a suitable package from
@uref{https://github.com/electron/electron/releases/latest,here}.
Get the @code{zip} file with the plainest name (no @code{-symbols}
or @code{-pdb}).
For example, at the time of writing the current release is 7.1.2, so
for Windows you want @code{electron-v7.1.2-win32-x64.zip}.
Unzip into a freshly-created directory.

On Windows Subsystem for Linux (WSL), you need to unzip into a
directory on a Windows partition, not a Linux partition.
For example, assuming the Windows user name is @code{wuser}
and Electron version number @var{version}, do:
@example
cd /mnt/c/User/@var{wuser}
mkdir electron-@var{version}
cd electron-@var{version}
unzip  /mnt/c/User/@var{wuser}/Downloads/electron-v@var{version}-win32-x64.zip
@end example

So that the @code{domterm} executable can find the electron executable,
you can create an entry in @ref{Settings,@code{settings.ini}}:
@example
command.electron = @var{/path/to/electron}/electron
@end example
or (on WSL):
@example
command.electron = /mnt/c/User/@var{wuser}/electron-@var{version}/electron.exe
@end example

Alternatively, you can create a symlink in your @code{PATH} to electron.
For example, on WSL (where @code{~/bin} is in the default @code{PATH}):
@example
cd ~/bin
ln -s /mnt/c/User/@var{wuser}/electron-@var{version}/electron.exe electron
@end example

@subheading Building from source

If building from the @code{git} respository, first do:
@example
autoreconf -i
@end example
This runs the GNU autotools (@code{aclocal}, @code{autoconf},
and @code{automake}).

Then run the @code{configure} script:
@example
./configure @var{configure-options}
@end example
where @var{configure-options} can be:
@table @code
@item --prefix=@var{install-prefix}
Set the root of the tree into which @code{make install}
will install the built domterm.
The default is @code{/usr/local}.
The @code{domterm} and @code{qtdomterm} executables are
installed in @var{install-prefix}@code{/bin},
@code{man} pages are installed in @var{install-prefix}@code{/share/man},
and other ``resources'' are installed
in @var{install-prefix}@code{/share/domterm}.

On WSL the @var{install-prefix} should be on a Windows partition,
at least if you want to use the Electron front-end (which is recommended).

@item --with-libwebsockets[=@var{lws-build}]
Build the C application @code{ldomterm},
which uses @uref{https://libwebsockets.org/,libwebsockets}.
If @var{lws-build} is specified, it should be the path
to the @code{build} subdirectory of the libwebsockets compiled source tree.
(The files @code{@var{lws-build}/lib/libwebsockets.a}
and @code{@var{lws-build}/include/libwebsockets.h} should exist.)

Libwebsockets version 2.2 or newer is required,
as older versions do not support flow control or paging.

This is the recommended ``backend'' and the default.
@item --with-java_websocket
@itemx --with-java_websocket=/path/to/java_websocket.jar
Build a WebSocket server, using
@uref{https://github.com/TooTallNate/Java-WebSocket/,Java WebSockets},
which allows using any modern browser as a front-end.
This server is no longer recommended or enabled by default.

This options adds the classes in @code{java_websocket.jar} to @code{domterm.jar}.
@item --with-asciidoctor
Generates help and man pages using AsciiDoctor.
The default is to do so if @code{asciidoctor} is in the path.
@item --with-javafx[=@var{library-name}]
Enable using JavaFX to run standalone applications.
The @code{@var{library-name}} does not need to be specified if using Java SE 8.
It may be needed for OpenJDK or Java SE 7,
in which case it is either a path to @code{jfxrt.jar},
or (for convenience if using Java SE 7) the @code{JAVA_HOME}.

If using Java 11 or later (which is ``modularized''),
you might set:
@example
export JDK_JAVA_OPTIONS='--module-path /path/to/javafx-sdk-13.0.1/lib --add-modules javafx.controls,javafx.web'
@end example
@item --without-java
Disable building anything that depends on Java.
@item --with-qtwebengine
Use Qt and @uref{https://wiki.qt.io/QtWebEngine,QtWebEngine}
to build @code{qtdomterm}, an advanced front-end that
supports multiple tabs, screen re-sizing, and other nice features.

For this you need the Qt development tools including QtWebEngine installed.

For Fedora, you also need:
@example
sudo dnf install qt5-qtbase-devel  qt5-qtwebchannel-devel qt5-qtwebengine-devel
@end example
@item --with-closure-compiler=@var{compiler.jar}
Use Google @uref{https://developers.google.com/closure/compiler/,Closure Compiler} to minimize the size of the JavaScript.
(Current only the ``simple optimizations'' are done.
Using the ``advanced optimizations'' would reduce the JavaScript file
size further, but causes some not-yet-resolved problems.)

@item --enable-compiled-in-resources
This feature causes the html, JavaScript and css files needed by DomTerm
to be compiled into the executable.
Otherwise, they are served from the compressed @code{domterm.jar}.

@c @item --enable-ld-preload
@c This is an experimental feature to preload a library to interpose
@c some system functions.  Most importantly it overrides @code{tcgetattr}
@c so that DomTerm gets notified on term terminal mode changes.
@end table

Then just:
@example
make
@end example

To test it, you can try either:
@example
bin/domterm
@end example
or
@example
bin/qtdomterm
@end example
Either starts up a useable terminal emulator in a fresh window.
(The latter is equivalent to @code{bin/domterm --qt}.)

Optionally, you can install the built files
into the configured @var{install-prefix} directory:
@example
make install
@end example

@anchor{building-on-WSL}
@subsubheading Windows using Linux for Windows

Microsoft Windows is now supported using
@uref{https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux, Windows Subsystem for Linux (WSL)}.
This has been tested using the Ubuntu distrubution:
Follow the above Ubuntu instructions for getting prerequsities
(without the optional qt packages),
including (currently) building libwebsockets from source.

Other distributions should work but have not been tested.

It is also recommended that you install electron, as described above.
Electron is a Windows executable, and it needs to be able to read
the ``electron application'' files in @code{share/domterm/electron}.
Hence, if you run @code{domterm} in-place (without @code{make install}),
the @code{clone}'d source directory must be on a Windows partition.
Alternatively, if you run domterm as installed by @code{make install},
then the @var{install-prefix} must be on a Windows partition.

If you want want to use a web browser, Win32 versions of
both Firefox and Google Chrome work pretty well.
The default location (for Firefox 
@code{c:\Program Files (x86)\Mozilla Firefox\firefox.exe})
should work out-of-the-box.  Otherwise specify
@code{command.firefox} or @code{commmand.chrome} in
@ref{Settings,@code{settings.ini}}.

Note that the Microsft Edge browser does not work
(for reason not yet known).
(Internet Explorer wll probably never be supported.)

Domterm looks for the user settings file in
@code{c:\Users\@var{USER}\AppData\Roaming\DomTerm\settings.ini}.

@node domterm application
@chapter The domterm command

The @code{domterm} command is the preferred away of using DomTerm.
The command has various sub-commands and options.
Most sub-commands will start a server in the background
if one isn't already running.

If you run @code{domterm} with no arguments, it creates a new terminal
emulator window, just as if you'd start @code{xterm}, say.
You can specify options to specify what kind of window is
created (for example a new tab or a web browser window).
You can also specify a @var{command} to perform other actions
besides creating a new terminal emulator.

@c The actual @code{domterm} program is primarily a server
@c for WebSockets and http.  When it receives a connection,
@c it runs a specified command, by default a shell.

@c Unless @code{--port} is specified, @code{ldomterm} will automatically
@c start a browser session (the ``front-end'') that connects
@c to the server.  The default is currently
@c as if you specified @code{--electron}, or @code{--browser} (if the
@c @code{electron} is not found).

@display
@code{domterm} [@var{options}] [@var{command} @var{arg}...]
@end display

The @var{command} specifies one of a set of commands used to control
@code{domterm}, as described in the following sections.
If @var{command} is not specified, the default command is @code{new},
which creates a new session using a default shell such as @code{/bin/bash}.

@anchor{session-creating}
@subheading Creating a new session

Creating a new session is done with the @code{new} commands,
possibly abbreviated:

@display
[@b{@code{new}}] [@var{executable} @var{arg}...]
@end display

This creates a new process running the @var{executable}
with the specified command-line arguments.

You can leave out the @code{new} if the @var{executable}
contains a ``@code{/}'' (slash).  For example:

@example
$ domterm /bin/csh -v
@end example

If @var{executable} is not specified, the default shell
(for example @code{bin/bash}) is used.
(See @code{shell.default} in @ref{Settings}.)

The @var{executable} runs a new terminal window,
as specified a @dfn{window specifier}.

The following options control which front-end (usually a browser),
if any, is started.

@subheading Window specifier option

Use a @var{window-specifier} option with certain commands,
such as @code{new} or @code{attach}.  For example:

@example
domterm --electron new
domterm --below attach '#4'
domterm --firefox /bin/sh
@end example

@table @asis
@item @code{--browser}
@itemx @code{--browser=}@var{program}
@itemx @code{--browser=firefox}
@itemx @code{--browser=google}
@itemx @code{--browser=google-chrome}

Use @var{program} as a browser to run DomTerm in.
If @var{program} is not specified,
creates a new window or tab in your preferred desktop browser.

If @var{program} is specified, instead creates a window
in the specified browser, where @var{program} is the name
of a browser program that takes a single URL argument.
The @var{program} can be a multi-word template,
where @code{%U} is replaced by a URL generated by @code{domterm}.
If @var{program} contains a @samp{$} it is processed by the shell;
the @var{program} should either deamonize itself or otherwise run
in the background (perhaps by using @samp{&}).
If @var{program} does @emph{not} contain a @samp{$}, @code{domterm}
splits it into words and runs it directly (daemonized).

Using @code{firefox}, @code{chrome}, or @code{google-chrome}
for @var{program} enables some special tricks to search for those browsers.
(Using @code{chrome} or @code{google-chrome} has the same effect.)

@item @code{--electron}
Use a front-end based on @uref{https://electron.atom.io/,Electron}.
This is currently the nicest (and default) front-end.

@item @code{--firefox}
Same as @code{--browser=firefox}.
(This used to start a @uref{https://en.wikipedia.org/wiki/XUL,XUL}
application, but that is no longer supported.)

@item @code{--chrome}
Creates a new window/tab in the Google Chrome browser.
Same as @code{--browser=chrome}.

@item @code{--chrome-app}
This uses the Google Chrome browser, but
started using the @code{--app=} option,
so you get a fresh chrome-less window (with no menubar or toolbar).

This works well and the performance is good.

@item @code{--qt}
@itemx @code{--qtdomterm}
@itemx @code{--qtwebengine}
Either option (they do the same thing)
runs @code{qtdomterm} with the @code{--connect} option,
after starting up a websockets server.

@item @code{--left}
@itemx @code{--right}
@itemx @code{--above}
@itemx @code{--below}
If there is a current DomTerm window, split it in two,
and create a new window to the left/right/above/below the old one.
@item @code{--pane}
Equivalent to either @code{--right} or @code{--below} depending
on the current window's width/height ratio.
@item @code{--tab}
Create new tab.

@item @code{--detached}
When creating a new session, it is detached, without a window.
@end table

@subheading Miscellaneous commands

@table @asis
@item @b{@code{help}} [@var{sub-help}]
Print some help.  The @var{sub-help} may be a sub-command.

@item @b{@code{is-domterm}}
Succeeds (exits with code 0) if the current terminal is DomTerm;
fails (exits with code -1) otherwise.

This test does not depend on environment variables,
but instead sends a special request code, and checks the response.
This test works over an @code{ssh} connection.
(The test does require that either @code{DOMTERM} be non-empty,
or that @code{TERM} be either empty or contain the string @code{xterm};
otherwise it does not try to the request code.)

@item @b{@code{status}}

Prints various bits of information about the backend,
sessions, windows, and version numbers.
The infomration displayed and the format are likely to change.

@item @b{@code{browse}} @var{url}
Create a new browser window or sub-window that displays @var{url}.
This is implemented using an @code{iframe}.
Access depends on the permissions of the browser (front-end).
(A future command may proxy via the back-end server.)

One use for this is to view documentation in a sub-window:
@example
$ domterm --above browse http://example.com/
@end example

@item @b{@code{view-saved}} @var{filename}
The @var{filename} is an HTML file of a previously saved session.
Open the session is ``view'' mode: Lines will be re-wrapped
on window re-size, links are clickable, and hide/show buttons work.
@end table

@subheading ``Printing'' images or html

@table @asis
@item @b{@code{html}} [@code{--base=}@var{base-url}] 
@itemx @b{@code{html}} [@code{--base=}@var{base-url}] @var{html-value} ...
@itemx @b{@code{hcat}} [@code{--base=}@var{base-url}] @var{filename}@code{.html} ...

Use this to embed HTML content info the DomTerm page.
If there are no arguments, read from standard input.
Either of the following work:
@example
echo 'E = mc<sup>2</sup>' | domterm html
domterm html 'E = mc<sup>2</sup>'
@end example
displays: @code{E = mc@sup{2}}.

The @var{html-value} can be a complete html file,
but elements such as @code{<html>}, @code{<body>} or @code{<style>}
are ignored.

Relative URLs are resolved relative to the @var{base-url},
which can be an absolute URL or a filename or directory;
the default is the current working directory.

The @code{hcat} command takes the name of an html file, rather than
literal html.
(With no arguments @code{hcat} is the same as @code{html}.)
The following are equivalent:
@example
domterm hcat /path/to/doc.html
cat /path/to/doc.html | domterm html --base=/path/to/
@end example

@item @b{@code{image}} [@code{-@var{n}}] [@code{--@var{attrname}=@var{attrvalue}}]... @var{filename}
@itemx @b{@code{imgcat}} [@code{-@var{n}}] [@code{--@var{attrname}=@var{attrvalue}}]... @var{filename}

This script ``prints'' the contents of the named image file to domterm.
This uses a ``@code{data:}'' URI with the file contents sent directly to domterm, so it works when working remotely.

The @var{filename} must be a file that can be displayed
by an HTML @code{<img>} element, most commonly a @code{png} or @code{jpg} file.

By default (no @code{-n} is specified),
the image has a @code{display: block} style
(so it is automatically on a ``line'' by itself),'
and gets a horizontal scroll bar if and only if it is too wide to fit.
If @code{-n} is specified, then only a plain @code{<img>} element is written,
which means you can write multiple images and other HTML on the same ``line''.

@table @asis
@item @code{--@var{attrname}=@var{attrvalue}}
Specify the given attribute; for example: @code{--height=200}.
Valid @var{attrnames} are the following, which
are specified in the HTML specification:
@code{alt}, @code{longdesc}, @code{height}, @code{width}, @code{border}, @code{hspace}, @code{vspace}, @code{class}.

For example: @code{--width=600} scales the image width to be the given number
of pixels (in the CSS meaning).  (The height is scaled proportionally,
unless you also specify the @code{--height} option.)
@end table

@item @b{@code{fresh-line}}
If not already at beginning of line, starts a fresh line
@end table

@subheading Sessions

@table @asis
@item @b{@code{attach}} @var{session-specifier}
Create a new window displaying an existing session.
The same session (process) may be displayed in multiple windows.
See @ref{session-specifier}.

@item @b{@code{list}}
List information about running sessions.

The @code{status} command shows more information,
including some information about each window.
@end table

@subheading Miscellaneous options

@table @asis
@item @code{--geometry} @var{width}@code{x}@var{height}
Specify initial size of new top-level windows.
The default if not specified is currently @code{800x600}.
The @var{width} and @var{height} are in pixel units
and must be positive integers.

Works for the Electron, qtdomterm, and @code{--chrome-app} front-ends,

@item @code{-L} @var{socket-name}
@itemx @code{--socket-name=}@var{socket-name}
DomTerm uses a Unix Domain socket to communicate between
the command-line and the server.
By default the socket is the file @code{$XDG_RUNTIME_DIR/domterm/default.socket},
but this option overrides that.
Using different socket names mean you get different servers
that do not know about each other.
If @var{socket-name} starts with @samp{/} then the filename is absolute;
otherwise @code{$XDG_RUNTIME_DIR/domterm/} is prepended.
If there is no file extension, @code{.socket} is appended.

DomTerm also creates a temporary @code{html} that has the
same name as the socket, but with a @code{.html} extension.
That is by default it is @code{$XDG_RUNTIME_DIR/domterm/default.html}.

@item @code{--settings=}@var{filename}

Specify the location of the @ref{Settings} file containing user preferences.
(The default is @code{.config/domterm/settings.ini} in the user's
home directory, except on WSL (Windows Subsystem for Linux).)

Note this flag won't have much if any effect if you specify it
when there is already a running domterm server.

@item @code{--no-daemonize}
When a domterm backend (server) is created, it normally turns itself
into a @uref{https://en.wikipedia.org/wiki/Daemon_(computing),daemon}.
This option prevents ``daemonizing'' - which is helpful for debugging.

@item @code{--remote-debugging-port=@var{debug-port}}
@emph{Only relevant for the @code{qtdomterm} front-end.}
(For the Electron front-end, use menu item @i{Toggle Developer Tools}.
If using a general web browser, use its debugger.)
Allow @uref{http://doc.qt.io/qt-5/qtwebengine-debugging.html,remote debugging}
(using a Chromium-based browser, such as Google Chrome).
This is useful for debugging DomTerm itself, as well as any
inspecting any unusual HTML, CSS, or JavaScript you might throw at it.

@end table

There are other @code{ldomterm} options which useful
if you want to run DomTerm as a server.

@subheading Starting a web server

The @code{domterm} command normally starts an internal web-server, bur
for security reasons this is only usable by the current user on the
current computer (enforced by the browser having to read a file
in the user's directory).

Sometimes you want a public web-server that other people can
attach to.  For that use the @code{--port} option
and the @code{--ssl} options.
See @ref{Remote serving} for more information.

@table @asis
@item @code{--port} @var{portnum}
Start a server, listening on the specified @var{portnum}.
A @var{portnum} of 0 lets the system choose an available port,
which is printed out.
The server is an @code{http} server, unless @code{--ssl} is specified,
in which case it an @code{https} server.
No front-end is started.

@item @code{--ssl}
Start an @code{https} server rather than an @code{http} server.
Strongly recommended except for testing.

@item @code{--ssl-cert} @var{cert-file}
The name of a file containing the server certificate.
@item @code{--ssl-key} @var{key-file}
The name of a file containing the passphrase needed for the private key.
@item @code{--ssl-ca} @var{ca-file}
CA (certificate authority) filepath.

@item @code{--once}
@emph{(Probably obsolete.)}
Only allow a single connect before shutting down.
This option is the default unless @code{--port} is specified.
@end table

@subheading Working with styles

@table @asis
@item @b{@code{reverse-video}} @code{on}|@code{off}
@end table

@table @asis
@item @b{@code{add-style}} @var{style-rule} ...

If called for the first time, create and install a temporary
stylesheet.
This temporary stylesheet has a @code{name} attribute
with the value @code{"(temporary-styles)"}.
Add each @var{style-rule} to the temporary stylesheet.

For example, to change the background color to pink:
@example
$ domterm add-style "div.domterm @{ --background-color: pink @}"
@end example

You can also set the @code{background-color} style directly:
@example
$ domterm add-style "div.domterm @{ background-color: pink @}"
@end example
Howeverm it is better to set the @code{--background-color} CSS variable,
as that is required for reverse video and ``Background Color Erase'' to work.

Inverse video (using CSS variables):
@example
$ domterm add-style "div.domterm @{ --background-color: black; --foreground-color: white @}"
@end example

Changing font size:
@example
$ domterm add-style "body @{ font-size: 14pt @}"
@end example

@item @b{@code{list-stylesheets}}
List on the standard output the set of stylesheets associated with
the domterm document, one per line:

@example
$ domterm list-stylesheets
0: enabled  - "style/domterm-core.css"
1: enabled  - "style/domterm-standard.css"
2: enabled  "Default DomTerm styling" "style/domterm-default.css"
3: enabled  - "(temporary-styles)"
@end example
After the sequence number, either @code{enabled} or @code{disabled}
specified whether the stylesheet is disabled.
If the stylesheet has a @code{title}, if is shown next (in json format);
otherwise @code{-} is printed.
If the stylesheet has the @code{href} attribute, it is shown next
(in json format);
otherwise, if it has the @code{code} attribute, that is shown;
otherwise @code{-} is printed.

@item @b{@code{load-stylesheet}} @var{name} @var{filename}

Replace or create a new stylesheet with the given @var{name}.
The content of the stylesheet are read from the given @var{filename}.
If the @var{filename} is @code{-} then standard input is used.

The @var{name} is used to set the non-standard @code{name} attribute
of the created @code{<style>} element.  If there is an existing stylesheet
with a matching @code{name} attribute, then that stylesheet is replaced;
otherwise a new stylesheet is created.
The @var{name} attribute is displayed by the @code{list-stylesheets} subcommand.

@item @b{@code{print-stylesheet}} @var{index}
Print out the style rules of the specified stylesheet,
which is an @var{index} in the @code{list-stylesheets} output.

@item @b{@code{disable-stylesheet}} @var{index}
@itemx @b{@code{enable-stylesheet}} @var{index}
Disable or enable the specified stylesheet.
A @var{index} is an integer index into the
list as shown by @code{list-stylesheets}.

@example
$ domterm disable-stylesheet 2
@end example
@end table

@node Settings
@chapter The settings.ini file

User preferences for DomTerm are normally in the file
@code{.config/domterm/settings.ini} in the user's home directory.
This location can be overridden with the @code{--settings} command-line option;
otherwise the location is @code{$XDG_CONFIG_HOME/domterm/settings.ini},
where @code{XDG_CONFIG_HOME} defaults to @code{$HOME/.config}.
(For compatibility reasons, @code{$HOME/.domterm/settings.ini}
is also checked if @code{$XDG_CONFIG_HOME} is unset, but that may go away.)

(On WSL (Windows Subsystem for Linux) the file is
@code{c:\Users\@var{USER}\AppData\Roaming\DomTerm\settings.ini}.)
You can override this default with the @code{-settings} command-line argument.
If the @code{settings.ini} is changed it is automatically re-loaded.

The syntax of @code{settings.ini} is a variant
of the @uref{https://en.wikipedia.org/wiki/INI_file,INI file} format.
A preference is written as:
@example
@var{keyword} = @var{value}
@end example
For example:
@example
window.geometry=800x600
@end example
Spaces before or after @code{=} are optional.
A @var{keyword} should be a sequence of letters, numbers,
periods or hyphens.
The @var{value} is almost any sequence of characters (depending of
the @var{keyword}), up to end of the line.

Multi-line values are written as an empty line following the @samp{=},
and then one or lines starting with a single space followed by @samp{|}.
For example:
@example
style.user =
 |div.domterm @{ --background-color: azure @}
 |div.domterm-spacer @{background: none @}
@end example
In this cases the resulting @var{value} has two lines,
with the two-character prefixes @samp{ |} removed.

For a boolean @var{value} any
one of @code{true}, @code{yes}, or @code{on}
enable the preference;
one of @code{false}, @code{no}, or @code{off}  disable the preference.

Comment lines start with @code{#} in the first column.
Comment lines and all-blank lines are ignored.

@table @asis
@item @code{@b{shell.default} =} @var{command}
Specify a default ``shell'' command to execute when creating a new terminal.
The command can include arguments, separated by spaces.
You can uses quotes, as in a shell.

The default is the value of the @code{SHELL} environment variable;
if that is not set the default is @code{/bin/bash}.

@item @code{@b{frontend.default} = } @var{application-list}

The browser-like program used to create new top-level windows,
unless overridden by a specific window-specifier command.

The @var{application-list} is a list of commmand front-end,
separated by newlines or semi-colons.  The commands are tried
left-to-right, until one is found that exists and is executable.
The default is currently:
@example
frontend.default = electron;qt;chrome;firefox;browser
@end example
The commmands @code{electron}, @code{qt}, @code{chrome},
@code{firefox}, or @code{browser} are equivalent to the
corresponding windows-specifier @code{--electron} and so on.
Otherwise a command may be include command-line arguments
(possibly quoted), optionally including @code{%U},
similar to the @var{program} in a @code{--browser=@var{program}} option.

@item @code{@b{command.firefox} =} @var{command}
@itemx @code{@b{command.chrome} =} @var{command}
@itemx @code{@b{command.electron} =} @var{command}
Command to use for respectively @code{--firefox},
@code{--chrome}, or @code{--electron}.

The default for these is to search in the @code{PATH},
possibly with some platform-depending knowledge of default locations.

@item @code{@b{window.geometry} =} @var{geometry}
Control the size of new top-level windows.
(Currently works for either Electron or qtdomterm windows,
as well as ones started with @code{--chrome-app}.)
The @var{geometry} has the same syntax as the @code{--geometry}
command-line opton, @code{@var{W}x@var{H}},
where @code{@var{W}} and @code{@var{H}}
are the width and height of the window, in pixels.

The default is @code{800x600}.

@item @code{@b{style.user} =} @var{css-style-rules}
Set the @code{user} stylesheet to the rules in @var{css-style-rules}.
The latter is typically a multi-line value.

See the @ref{Styling} section for examples.

@item @code{@b{style.qt} =} @var{css-style-rules}
@code{qtdomterm} only: Set styling for QT user interface widgets.
For example to specify the color green
for text in @code{QMenu} do:
@example
style.qt =
 |QMenu @{ color: green; @}
@end example
See @uref{http://doc.qt.io/qt-5/stylesheet-examples.html, more examples}.

@item @code{@b{style.dark} =} @var{value}
This option (if set) selects ``reverse video'', which is a color preference
for a darker background and a ligher foreground (text).

The default is @code{off}, which selects
lighter background and a darker foreground colors.

@item @code{@b{style.caret} =} @var{value}
Change the style of the caret (text input cursor).
See @ref{caret-styling}.

@item @code{@b{open.file.application} =} @var{application-list}
@itemx @code{@b{open.link.application} =} @var{application-list}
List of applications to try when clicking on a link.
If the link's @code{href} is a @code{file:} URL,
then the @code{open.file.application} list is tried first;
then the @code{open.link.application} list is tried.
For a non-@code{file:} URL, only the @code{open.link.application} list is tried.

For details, see @ref{link-handlers}.

@item @code{@b{keymap.line-edit} =} @var{keymap-overrides}
Add or replace keybindings for @ref{Input line editing,input line editing}.
(Changing other keybindings is planned but not yet implemented.)
@item @code{@b{keymap.master} =} @var{keymap-overrides}
Add or replace keybindings that are active in all modes. 
@end table

@node Applications
@chapter Other DomTerm Applications

The core of DomTerm is the JavaScript @code{terminal.js},
but we also provides a few wrappers and applications that make use of it.

The @code{domterm} command is normally an alias for @code{ldomterm}.

@menu
* qtdomterm application::
* jdomterm script::
@end menu

@node qtdomterm application
@section The qtdomterm terminal emulator

@strong{The plan is to simplify qtdomterm so it just handles display.
It will be invoked by the @code{domterm} command to handle display,
while the @code{domterm} command manages jobs and sessions.}

You start and use @code{qtdomterm} just like other
terminal emulators such as @code{xterm}.
In addition to the regular DomTerm features (colors, stylesheets,
mouse-handling, embedded graphics, etc)
it also supports multiple tabs and windows, convenient text zooming,
and remote debugging,

@display
@code{qtdomterm} [@var{options}] [[@code{-e}] @var{command} @var{argument} ...]
@end display

This runs the @var{command}, with the specified @var{argument}s,
in a sub-process using a pty.
The @var{command} defaults to the value of the @code{SHELL}
environment variable.

The @var{options} include:
@table @asis
@item @code{--connect} @var{host}@code{:}@var{port}
This does not start an inferior @var{command}.
Instead it connects to an already-running WebSocket server,
as you might start with @code{domterm --port @var{port} [@var{command}]}.

This is one way to run commands on a remote server.

@item @code{--help}
Print a help message with options, and then exits.
@item @code{--version}
Print the version number, and then exits.
@end table

@node jdomterm script
@section The jdomterm terminal emulator script

The @code{jdomterm} script is no longer recommended as a general terminal-emulator.
It can be useful when using Java as it does not require native code.

By default it runs a shell (@code{bash}), but there are a number of options.

@display
@code{domterm} [@var{frontend}] [@var{backend-arguments}]
@end display

The @var{frontend} argument specifies the front-end or user interface
application - i.e. some kind of browser.
The @var{backend-arguments} specify which command is run and how it is run.

@subsubheading Front-end (user interface) options

The @var{frontend} is one of the following:
@table @asis
@item @code{--browser}
@itemx @code{--browser=}@var{program}
@itemx @code{--chrome}
@itemx @code{--firefox}
@itemx @code{--qtdomterm}
@itemx @code{--qtwebengine}
Similar to the @code{ldomterm} options.

@item @code{--javafx}
This uses Java and the JavaFX WebView browser component (based on WebKit).
It needs OpenJDK 1.8 (or JDK 7 with JavaFX) but should otherwise
not need anything else.  Instead of a WebSocket server,
it uses JavaFX's Java/JavaScript bridge.

The UI (written in Java using the JavaFX toolkit) is minimal,
but right-clicking will bring up a popup menu.
This supports copy and paste, as well as
switching the input mode between line, character, or auto mode.

There are some glitches, and since JavaFX is not being actively
developed, this port is not a priority.

@item @code{--port} @var{portnum}
Start a WebSocket server, listening on the specified @var{portnum}.
(A @var{portnum} of 0 lets the system choose an available port,
which is printed out.  The default for @code{repl-client.html} is @code{8025}.)

No front-end is started automatically.
Instead, you load @code{repl-client.html} in your preferred web browser,
and it connects to the server.
If the server is listening on port @var{portnum} (rather than port 8025),
browse to @code{file:///path/to/DomTerm/repl-client.html?ws=//localhost:@var{portnum}}.

This allows you to use "any" modern browser as the client.
This is nice for development, as you can use the browser's
JavaScript console and debugger, DOM inspector, and so on.
The browser talks to server using WebSockets,
which modern browsers have built-in.
@end table

@subsubheading Back-end (command) options

The @var{backend-arguments} are one of:
@display
[@code{--pty}|@code{--pipe}|@code{-e}] [@var{command} @var{arg}...]
@code{--class} @var{classname} @var{arg}...
@end display

You can specify some other @var{command} and @var{arg} in
place of the default @code{/bin/bash}.

Specifically:

@table @asis
@item @code{-e} [@var{command} @var{arg}...]
@itemx @code{--pty} [@var{command} @var{arg}...]
This is the default on Unix-like systems (MacOs, GNU/Linux, BSD).
It runs @var{command} under a PTY.
Communication is by default character-by-character, but
can also be line-based.
@item @code{--pipe} [@var{command} @var{arg}...]
The input/output of the @var{command} is connected to DomTerm using
pipes.  Data communication is normally on a line-by-line basis.
(It is also possible to send single keystroke message.)
The implementations uses a Java @code{Process} object.
This should work on Windows, though it has not yet been tested.

@item @code{--class} @var{classname} @var{arg}...
This runs the @code{main} method of a specified Java class,
but with the standard streams (input, output, and error)
re-bound to a DomTerm window.

@example
CLASSPATH=@var{my-application.jar} domterm --class @var{my.ClassName} @var{arg}...
@end example

@end table

@node Frontends
@chapter Frontends including browsers

A @dfn{frontend} is a program that handles the user interface
for a session, in a @dfn{window}.
A frontend is either a web browser, or some application
that has an embedded @dfn{web engine}.
You have a number of options for a frontend, with different
advantages and limitions.
The two most polished frontends at this point are
the Electron and Qt frontends.

Multiple different frontends can talk to the same backend
at the same time.

@subheading Browser quirks and limitions

(These can all change as browsers change or work-arounds are implemented.)

Exiting the inferior process can sometimes fail to automatically
close the DomTerm window, due to browser security limitations.
It currently works on Google Chrome, but not Firefox.

Saving the console display to a file in a browser may
save to the browser's ``Downloads'' area.
You may be able to save the file elsewhere, depending
on the browser and its settings.

Microsoft Edge does at time of writing not handle the @code{tab-size}
CSS property, so on that browser tab characters are always converted to spaces.

@subsubheading Copy and paste

Copy and Paste menu items are only known to work with the
Electron and Qt front-ends.
The Paste menu-item on Qt is unreliable if the previous Copy
was from a different application.
The others may run into security restrictions.
A future workaround may be to have the backend
handle clipboard access, using programs such as
@code{xclip}, @code{xsel} (older), or @code{pbcopy}/@code{pbpaste} (Mac OS).

The keyboard shortcuts Ctrl-Shift-C and Ctrl-Shift-V
work on all tested platforms.

Middle-button paste seems to work on most frontends (on Linux)..

@subsubheading Note on menus

The Electron and Qt front-ends use their respective
menu interfaces, which works well.

On Electron disabling the menubar by clicking ``Show menubar''
is currently not working.

Most other frontends use a menu package written in JavaScript
that works fairly well, but has some minor issues.
One is that all menus are constrained to the main window.
Also (as mentioned above) copy and paste menu items may
not work due to browser security restrictions.

@subheading Electron

Start the Electron frontend (if available) with the @code{--electron} option.

@subheading Qt

Start the Qt frontend (if available) with the @code{--qt} option.

@subheading Desktop browser

Modern desktop browsers should work ok,
but note the limitations mentioned above (most notabley copy and paste).
However, only Firefox and Chrome are tested frequently.

@subsubheading Firefox

To open a Firefox window or tab use the @code{--firefox} specifier.
Recent versions of Firefox should work well.

Exiting the inferior process (such as by typing @code{exit} in a shell)
does not automatically close the browser window.

@subsubheading Chrome

To open a Google Chrome window or tab use the @code{--chrome} specifier.

The @code{--chrome-app} specifier creates a top-level Chrome window
without the standard Chrome location bar or other header ``chrome''.

@subheading Embedded in other environments

@subsubheading Atom

There is a fairly nice package for embedding DomTerm panes
in the @uref{https://atom.io/,Atom} text editor framework.
See @uref{https://github.com/PerBothner/atom-domterm,the repository}.

@subsubheading Theia

There is an experimental package for the
@uref{https://www.theia-ide.org/,Theia IDE}.
See @uref{https://github.com/PerBothner/theia,this fork}.

@node Remote serving
@chapter Remote serving

To start DomTerm as a web server, run the @code{domterm} command
with the @code{--port} option.
It is highly recommended that you use https,
with the @code{--ssl} option - see below.

It is of course possible to run the @code{ssh} command from a
DomTerm session, but that does not provide a persistent session on
the remote server if the connection fails.
There are plans to be able to connect over ssh to a remote domterm server,
but that is not yet implemented.

@subheading Using https

To use https you need a certificate.

A simple self-signed certificate:

@example
openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout server.key -out server.crt -subj "/CN=localhost"
@end example
Start the server with these flags:
@example
domterm --port 8080 --ssl --ssl-cert server.crt --ssl-key server.key
@end example
and then in your browser open @code{https://localhost:8080}.
Note that browsers will complain about self-signed certificates,
so this is only suitable for testing.

@node Sessions and Windows
@chapter Sessions and Windows

DomTerm can ``multiplex'' multiple terminal emulators
(similar to tmux or GNU Screen).

@subheading Terminology

A @dfn{session} is an emulated terminal with a process running under it.
A @code{domterm} @dfn{server} manages one or more sessions.
Typically, for each user there is at most a single @code{domterm} server
running at a time, though it is possible to create more:
The server is created as needed, and exits when there are no
more sessions.
(Note that @code{tmux} uses ``session'' to refer to multiple
processes running under the same server.)

Each session is usually displayed in a
@dfn{domterm window} or @dfn{window} for short.
If the session is not displayed in any window,
we say it is @dfn{detached}.
It is possible to display the same session in multiple windows.

A @dfn{top-level window} is window or tab in a web browser
(or embedded browser, like Electron).
A top-level window may be split vertically and/or horizontally
into one or more @dfn{tile}s (or panes).
Each tile has one or more @dfn{tabs}, where each
tab is a (sub-)window.  Only one of the tabs in a tile can be displayed
at a time.  These tabs are managed by domterm, and are
distinct from any tabs managed by a web browser or window manager
(though they have similar purpose).

A @dfn{non-session window} displays something other than
a DomTerm session.  The @code{domterm browse} command creates
a non-session window that displays a specified web page.
One use of this for is viewing documentation.

@subheading Managing sessions

Creating a new session is done by invoke the @code{domterm} command with the
@code{new} sub-command, or with no arguments.
See @ref{session-creating,Creating a new session} for details.

The sub-command @code{list} lists active sessions.

The sub-command @code{attach} connects to an existing session,
often a detached session.  You specify the session
with a @ref{session-specifier}.

The can detach the current session using either the
keyboard short-cur @code{@mux-prefix d} or a menu command (Electron only).
More precisely, it marks the current session as @var{want-to-detach},
and closes the current window.  If there are other windows on the
session, they remain active, but the session is detached (rather than
exits) when the last window on the session closes.

When a session is detached, it saves the display state, so it can
be re-created if the session is later attached.
There is no auto-save in case of unintentional detach, such as
network failure or a browser crash, but there are plans to implement that.

@subsubheading Session specifiers

A session specifier has one of the following forms:
@table @asis
@item @var{pid}
The @var{pid} is the process ID (an integer) of the designed session.
@item @code{:}@var{session-number}
The session-number sequential number permanently associated with the session.
@item @var{session-name}
The @var{session -name} is a user-friendly name associated with the session,
and displaying in the tab-bar and title-bar of windows disdplay the session.
The default @var{session -name} is @samp{DomTerm:@var{session-number}}.
@end table

@node Input line editing
@chapter Input line editing

In ``line-editing mode'' most keystrokes add to or modify
an editing area in the domterm window, but are not sent to
the application until you type Enter.
This enables editing of input lines similar to GNU readliune.

The keystroke @kbd{ctrl-shift-@key{L}} cycles between char mode (most
characters sent immeditably to the application),
line mode (most characaters modify local editing area), and
auto mode (automatically switches between char mode and line mode
depending on whether the application requests ``raw'' (char) input
or ``canonical'' (line) input).

The following special keys are supported.
@var{N} is a repeat count, which by default is 1.
The word ``caret'' refers to the text cursor
(as opposed to the mouse cursor).
The names in parentheses are the corresponding action names that
can be used if changing the key-bindings.

@table @asis
@item @kbd{@key{Left}} (@code{backward-char})
@itemx @kbd{@key{Right}} (@code{forward-char})
Move caret @var{N} characters left or right.
@item @kbd{Ctrl-@key{Left}} (@code{backward-word})
@itemx @kbd{Ctrl-@key{Right}} (@code{forward-word})
Move caret @var{N} words left or right.
@item @kbd{@key{Home}} (@code{beginning-of-line})
@itemx @kbd{@key{End}} (@code{end-of-line})
Move caret to start/end of line.
@item @kbd{Shift-Left} (@code{backward-char-extend})
@itemx @kbd{Shift-Right} (@code{forward-char-extend})
Extends the current selection by one character.
(If there is no selection, the caret position is treated as
a zero-size selection.)
@item @kbd{Ctrl-Shift-Left} (@code{backward-word-extend})
@itemx @kbd{Ctrl-Shift-Right} (@code{forward-word-extend})
Extends the current selection by one word.
@item @kbd{@key{Shift-Home}} (@code{beginning-of-line-extend})
@itemx @kbd{@key{Shift-End}} (@code{end-of-line-extend})
Extend selection to start/end of line.
@item @kbd{@key{Backspace}} (@code{backward-delete-char})
@itemx @kbd{@key{Delete}} (@code{forward-delete-char})
Delete @var{N} characters to the left or right of the caret.
@item @kbd{Ctrl-@key{Backspace}} (@code{backward-delete-word})
@itemx @kbd{Ctrl-@key{Delete}} (@code{forward-delete-word})
Delete @var{N} words to the left or right of the caret.
@item @kbd{@key{Enter}} (@code{accept-line})
Send input line to application.
Also, if line is non-empty, add it to the history list.
@item @kbd{Alt-@key{Enter}} (@code{insert-newline})
Insert a literal newline.  Splits the current line at the current position,
creating two new lines, with the caret after the new break.
@item @kbd{Ctrl-@key{C}}
@itemx @kbd{Ctrl-Shift-@key{C}}
Copy selection to clipboard.
(Selection can be partly or fully outside input area.)
@item @kbd{Ctrl-@key{V}}
@itemx @kbd{Ctrl-Shift-@key{V}}
Paste selection from clipboard.
@item @kbd{Ctrl-@key{X}}
@itemx @kbd{Ctrl-Shift-@key{X}}
Cut (deleted) selection and copy to clipboard.
The selection should be wholly within the input area.
@item @kbd{@key{Up}} (@code{up-line-or-history})
@itemx @kbd{@key{Down}} (@code{down-line-or-history})
Move up/down in history.
If the current command is multi-line, first moves within the current
command before moving to commands in the history.
@item @kbd{Ctrl-@key{R}} (@code{backward-search-history})
Enter @ref{history-search-mode}.
@item @kbd{Alt-@key{Minus}}
@itemx @kbd{Alt-@var{digit}}
Set or extend a repeat count.
For example @kbd{Alt-1 Alt-2 Left} moves 12 characters left, while
@kbd{Alt-Minus Alt-2 Ctrl-Left} moves 2 words right (because of the minus).
@item @kbd{Ctrl-@key{A}} (@code{beginning-of-line})
@itemx @kbd{Ctrl-@key{B}} (@code{backward-char})
@itemx @kbd{Ctrl-@key{D}} (@code{delete-char})
@itemx @kbd{Ctrl-@key{E}} (@code{end-of-line})
@itemx @kbd{Ctrl-@key{F}} (@code{forward-char})
@itemx @kbd{Ctrl-@key{N}} (@code{down-line-or-history})
@itemx @kbd{Ctrl-@key{P}} (@code{up-line-or-history})
@itemx @kbd{Alt-@key{B}} (@code{backward-word})
@itemx @kbd{Alt-@key{F}} (@code{forward-word})
Emacs-style alternate keybindings.
@end table

The ``standard'' mouse commands should work as expected.
If you click before/after the input area,
the caret is moved to the start/end of the input area.

@emph{Not implemented yet, but planned:}
Emacs-style key-bindings should be controlled by a separate option;
some bindings are missing, such as @kbd{Ctrl-@key{T}},
and the ones prefixed by @kbd{Esc}.
Command-completion, using some protocol to be defined.
A plug-in replacement for GNU @code{readline} using @code{LD_PRELOAD}
would be nice. (The idea is for an enhanced readline to detect it is running
under DomTerm, in which case it would delegate most editing to DomTerm.
This would allow using bash completion logic.)
Auto-completion (completion as you type).

@anchor{history-search-mode}
@subheading Searching in history

The @kbd{Ctrl-@key{R}} key enters history-search mode.
As you type characters, a search string is created, which
is matched against the items in the history list.

@table @asis
@item @kbd{@var{printable-char}}
Append (or insert) @var{printable-char} to the search string,
which may update the selected history item.
@item @kbd{@key{Left}}
@itemx @kbd{@key{Right}}
Move caret within search string.
@item @kbd{@key{Backspace}}
@itemx  @kbd{@key{Delete}}
Delete character from search string. This may change the selected history item.
@item @kbd{Ctrl-@key{R}}
@itemx @kbd{Ctrl-@key{S}}
Search for previous/next history item matching the current search string.
If the search string is empty, use previous search string.
For example @kbd{Ctrl-@key{R} Ctrl-@key{R}} repeats previous search.
@item @kbd{@key{Enter}}
Exit search mode, accept current item, and send it to the application.
@item @kbd{@key{Up}}
@itemx @kbd{@key{Down}}
Exit search mode, and move to previous/next history item.
@item @kbd{@key{Tab}}
Exit search mode, accept current item, but continue editing it.
@end table

@subheading Changing keybindings

You can override the keymap (map from keystrokes to action)
used for input line editing (but not yet override other key-bindings).
The @code{keymap.line-edit} is a list (separated by commas or newlines),
where each item is a quoted keystroke string, followed by a colon,
followed by an action name. An action name is a string,
but quotes are optional.  The following example disables
the binding for @kbd{Ctrl-A} and adds a binding that
maps @kbd{Ctrl-H} to the @code{beginning-of-line} action.

@example
keymap.line-edit =
 | "Ctrl-A": ignore-action
 | 'Ctrl-H': beginning-of-line
@end example

@anchor{password-fields}
@subheading Password fields

A ``password field'' is an input area where the typed characters
are hidden or obscured.  DomTerm will display each character
as a black circle instead of the actual character.
(The replacement character is the @code{passwordHideChar} property.)
The most recently typed character is displayed briefly (depending on
the @code{passwordShowCharTimeout} property) before it too is replaced
by a black circle.
On Enter, all circles are removed.

Using these circles makes it easier see how many characters you've typed,
and to move around using the mouse or cursor keys.

A password field is automatically created when we're in line-editing mode
and echoing is turned off by the program reading the input.

@node Paging
@chapter Paging and Pausing

DomTerm includes a builtin ``pager'' that gives you
functionality similar to programs like @code{less}.
You can set ``auto-pause'' which enters the pager each time
a full screen has been displayed.

We will discuss two related modes.
@dfn{Pager mode} does the following:
@enumerate
@item
The key-bindings are changed to be more
like the @code{less} program or Emacs ``view mode''.
@item
Automatically scrolling (on output) is turned off.
@end enumerate

@dfn{Pause mode}  additionally does the following:
@c NOTE The following lines are kludged in the Makefile.
@enumerate 3
@item
Suspends additional output from updating the display.
Any not-yet-displayed output is queued up,
and the sending (client process) will suspend too.
@end enumerate

You enter pause mode in two basic ways
@itemize
@item
You manually enter pause mode by typing Ctrl-Shift-M.
@item
You automatically enter pause mode if automatic pausing is
enabled, and a ``full screen'' is displayed since last user interaction:
Any further output would cause part of the visible screen to scroll off.
@end itemize

To enable automatic-pause mode you can
check the @code{Automatic Pager} option in the right-click (context) menu.
(You can also type @code{ctrl-shift-M} (to enter pause mode);
then @code{a} (to enable auto-pause and also exit pause mode).

To enter pager mode, you first have to enter pause mode,
and then type @code{P}.

The following key-bindings are in effect in pager or paused mode.
Some other these may be prefixed by a numeric @var{count}.
@table @asis
@item @kbd{A}
Toggle automatic-pause mode on and off,
and then exit pager mode.
@item @kbd{p}
@item @kbd{%}
Move to @var{count} percent of the way between start
and end positions.
@item @kbd{Ctrl-@key{C}}
Interrupt output by sending @kbd{Ctrl-@key{C}} to the application,
and then exit paging mode after scrolling to the end.
@item @kbd{@key{m}}
Toggle between pager and paused modes.
@item @kbd{Ctrl-Shift-@key{M}}
Return to normal mode.
If paused, allow further output.
@item @kbd{Space}
Scroll @var{count} screenfuls down.
If we go past the bottom of the current output,
leave pause or pager mode, and allow further output.
Temporarily set automatic-pause mode, so that we pause again
if the screen fills up again.
@item @kbd{Enter}
Scroll @var{count} lines down.
Otherwise similar to Space.
@item @kbd{PageUp}
@itemx @kbd{PageDown}
Scroll @var{count} screenfuls up/down.
@item @kbd{Home}
Scroll to the current ``pager home''.  (Details needed ...)
@item @kbd{End}
Scroll the end of the buffer.
If paused and already at the end, un-pause.
I.e. continue displaying output until the next action.
@end table

DomTerm does not yet implement a search command,
but most browsers have a find-in-page command,
commonly bound to Ctrl-F.

In addition the following work as in all other modes:
@table @asis
@item @kbd{Ctrl-Shift-Home}
@itemx @kbd{Ctrl-Shift-End}
Scroll to top/bottom.
@item @kbd{Ctrl-Shift-PageUp}
@itemx @kbd{Ctrl-Shift-PageDown}
Scroll one ``page'' up or down.
@item @kbd{Ctrl-Shift-Up}
@itemx @kbd{Ctrl-Shift-Down}
Scroll one line up or down.
@end table

@node Styling
@chapter Styling

The appearance of a DomTerm window is controlled by CSS stylesheets.

You can place stylesheet rules in the @ref{Settings,@code{settings.ini}} file.
For example:
@example
style.user=
 |div.domterm @{ background-color: azure @}
@end example

You can also change the stylesheets using @code{domterm add-style} or
@code{domterm load-stylesheet} sub-commands.  For example:
@example
$ domterm add-style "div.domterm @{ background-color: azure @}"
@end example

@subheading Reverse video (dark vs light)

By default DomTerm uses uses dark-colored (black) foreground (text) on a
light-colored (off-white) background.
Reverse video switches these, by using a light-colored text
on a dark background.

You can enable reverse-video mode using the command:
@example
$ domterm reverse-video on
@end example
or in the @code{settings.ini} file:
@example
style.dark=on
@end example

Enabling reverse-video does not change stylesheet rules,
but instead sets the @code{reverse-video} attribute on the
top-level @code{domterm} element.  This is used to select
differe stylesheet rules for reverse-video.  For example
to change the background color input @code{input} lines
to a dark brown do this:
@example
div.domterm[reverse-video] span[std="input"] @{ background-color: #808200 @}
@end example

``Reverse-video mode'' is any style where the background is darker
than the foreground.  You can tweak individual style elements to
achieve such a style, but its better to first explicitly set reverse-video mode
(perhaps using the above command), because that
selects a consistent whole.

@subheading Color variables

DomTerm makes uses of
@uref{https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables,CSS Variables}, which is supported by most modern browsers.
The following variables define the main colors.

@table @code
@item --main-light-color
A light color used for the default background in normal mode,
or used for default foreground (text) in reverse-video mode.
@item --main-dark-color
A dark color used for the default foreground (text) in normal mode,
or used for default background in reverse-video mode.
@item --background-color
The color currently used for the main background.
Defaults to @code{--main-light-color} normally, or
@code{--main-dark-color} in reverse-video mode
(or after the SGR reverse-videa escape-sequence).
@item --foreground-color
The color currently used for the main background (text).
Defaults to @code{--main-dark-color} normally, or
@code{--main-light-color} in reverse-video mode
(or after the SGR reverse-videa escape-sequence).
@end table

A common desire is to change the default background color.
You can do any one of:
@example
div.domterm @{ --main-light-color: azure @} /* recommended method */
div.domterm @{ --background-color: azure @}
div.domterm @{ background-color: azure @}
@end example
Using @code{--main-light-color} is recommended because
it integrates better with the rest of the default stylesheets.

If you want to change to a dark background color,
it is recommended to you enable reverse-video mode instead (or in addition).

The following color variables define the standard 16
@uref{https://en.wikipedia.org/wiki/ANSI_escape_code#Colors,``ANSI colors''}:
@code{--dt-black},
@code{--dt-red},
@code{--dt-green},
@code{--dt-yellow},
@code{--dt-blue},
@code{--dt-magenta},
@code{--dt-cyan},
@code{--dt-lightgray},
@code{--dt-darkgray},
@code{--dt-lightred},
@code{--dt-lightgreen},
@code{--dt-lightyellow},
@code{--dt-lightblue},
@code{--dt-lightmagenta},
@code{--dt-lightcyan},
@code{--dt-white}.
The default definitions mostly match xterm.
For example @code{cyan} is @code{#00CDCD}.
It you can to change it to the standard VGA color, you
can add an override rule:
@example
div.domterm @{--dt-cyan: #00AAAA@}
@end example
The @code{mc} file browser by default sets the background to blue.
You can adjust the shade of blue used like this:
@example
div.domterm @{--dt-blue: #4040a0 @}
@end example

@subheading End-of-file background

DomTerm indicates the bottom area past the written
data with pale ``zebra stripes''.
If you want to disable this, do:
@example
div.domterm-spacer @{background: none @}
@end example
The spacer stripes alternatate between transparent and the value of @code{--spacer-color}.  You can change it thus:
@example
div.domterm-spacer @{--spacer-color: LemonChiffon@}
@end example

@subheading Fonts

The main monospace text font is set by the @code{--monospace-family} variable.
For example:
@example
div.domterm @{ --monospace-family: "FreeMono","DejaVu Sans Mono" @}
@end example

@subheading Prompt, input and error output
The @code{std} attribute of a @code{<span>} element is used to
indicate the logical kind of output.
The attribute @code{std='prompt'} marks a prompt before an input line,
while @code{std='prompt'} marks the input line itself.
(These attribute can be set using escape sequences in the prompt.)
You can change the colors used like this:
@example
span[std="prompt"] @{ background-color: lightgray @}
span[std="input"] @{ color: blue; background-color: inherit @}
@end example
Note the use of @code{inherit} to override the setting in the
default stylesheet.

If you want to change the style of the entire input line,
you can use the @code{input-line} property:
@example
div.input-line @{ background-color: #FFFFE8 @}
@end example

An application or library can use escape sequences to distinguish
the error output (@code{stderr}) from regular output (@code{stdout}).
(Most programs don't emit these escape sequences.
It is difficult to do this reliably without modifying the
program or the tty subsystem.)
If so, by default, the text color is @code{red}; to turn this off, do:
@example
span[std="error"] @{ color: inherit @}
@end example

@subheading Background image

Setting a background image:
@example
/* Note: browser security may disallow file: URLs. */
div.domterm @{
  background-image: url('file:/usr/share/backgrounds/gnome/Mirror.jpg');
  opacity: 0.4 @}
div.domterm-spacer @{background: none @} /* optional but recommended */
@end example
You can reduce the opacity to make the text more visible.

Note browsers may restrict the use of @code{file:} URLs
because of the @uref{https://en.wikipedia.org/wiki/Same-origin_policy,same-origin policy}.
Work-arounds are being considered; please contact the maintainer if this
is a feature you want.

@anchor{caret-styling}
@subheading Text caret (input cursor)

You can change the look of the caret (text input cursor)
using the @code{style.caret} setting in @ref{Settings,@code{settings.ini}}.
@example
@code{@b{style.caret} =} @var{value}
@end example

The @var{value} can be one of these (unquoted) words:
@code{block}, @code{blinking-block},
@code{underline}, @code{blinking-underline},
@code{bar}, or @code{blinking-bar}.
If can also be @code{native}, which uses the native
text caret (a vertical bar, typically),
but that is not recommended as it interacts awkwardly with the selection.

The default is @code{blinking-block}. Note that
@code{blinking-block}, @code{blinking-underline}, and @code{blinking-bar}
only blink 20 times after each change or focus.
To change the number of blinks set the CSS variable @code{--caret-blink-count}.
For example to blink indefinitely, add this to @code{settings.ini}:
@example
style.user= div.domterm @{ --caret-blink-count: infinite @}
@end example

You can also change the caret style with an
escape sequence (DECSCUSR).  For example this shell command:
@example
echo -en "\e[3 q"
@end example
changes the style to @code{blinking-underline}.
Instead of 3, you can use 0 (default - reset to @code{settings.ini} value, if any), 1 (blinking-block), 2 (steady block),
3 (blinking-underline), 4 (steady underline), 5 (blinking-bar), 6 (steady bar), or 7 (native),

@subheading Example: A ``solarized'' theme

The @uref{http://ethanschoonover.com/solarized,Solarized colorscheme}
aims for muted balanced colors for both light and dark styles.
Put the following in your @ref{Settings} for a
solarized dark look.

@example
style.dark=yes
style.user=
 | div.domterm @{ --solar-base03: #002b36; --solar-base02: #073642;
 |   --solar-base01: #586e75; --solar-base00: #657b83;
 |   --solar-base0: #839496; --solar-base1: #93a1a1;
 |   --solar-base2: #eee8d5; --solar-base3: #fdf6e3;
 |   --solar-yellow: #b58900; --solar-orange:  #cb4b16; --solar-red: #dc322f;
 |   --solar-magenta: #d33682; --solar-violet: #6c71c4;
 |   --solar-blue: #268bd2; --solar-cyan: #2aa198; --solar-green: #859900 @}
 | div.domterm @{  --main-light-color: var(--solar-base3);
 |   --main-dark-color: var(--solar-base03) @}
 | div.domterm[reverse-video] @{ --background-color: var(--solar-base03);
 |   --foreground-color: var(--solar-base0) @}
 | div.domterm span[std="input"] @{ background-color: var(--solar-base2) @}
 | div.domterm[reverse-video] span[std="input"] @{
 |   background-color: var(--solar-base02) @}
 | div.domterm-spacer @{background: none @}
 | div.domterm div.input-line, div.domterm[reverse-video] div.input-line @{
 |   background-color: var(--background-color); @}
@end example

The above is merely a suggested start.  The last few lines are optional.
You might want to tweak prompt and error colors. You could also change
the ``standard'' colors, for example:
@example
 | div.domterm @{--dt-blue: var(--solar-blue) @}
@end example

For a light solarized look, change the @code{style.dark=yes}
to @code{style.dark=no}.

@subheading Session-specific styles

Each ``session'' (terminal window) has a session number
and an optional settable session name.
See @ref{Names and titles} for the details.
The session number sets the @code{session-number} attribute
in the top-level @code{<div class="domterm">} element,
while the session name sets the @code{session-name} attribute.

You can use these to set different styles for different terminal windows.
For example:

@example
div.domterm @{ background-color: #FFE @}
div.domterm[session-number="1"] @{ background-color: #FEE @}
div.domterm[session-name="compile"] @{ background-color: #EEF @}
div.input-line @{ background-color: inherit @}
@end example

@node Keyboard shortcuts
@chapter Keyboard shortcuts

This does not list @ref{Input line editing,shortcuts specific to line-editing mode}.

@table @asis
@c FUTURE @item Ctrl-Shift-P
@c Enter/exit pager mode
@c FUTURE @item @mux-prefix
@c Prefix for Screen or TMux
@item @kbd{Ctrl-Shift-@key{C}}
Copy the selection to the clipboard.
It is copied as both plain text (@code{text/plain})
and formatted HTML (@code{text/html}) in case the receiving
application can paste the latter.
(@kbd{Ctrl-@key{C}} also works in line-editing mode.)
@item @kbd{Ctrl-Shift-@key{V}}
Paste text from the clipboard.
(@kbd{Ctrl-@key{V}} also works in line-editing mode.)
@item @kbd{Ctrl-Shift-@key{X}} (@code{cut-text})
``Cut'': Restricts the selection to the current input area,
copies that restricted selection to the clipboard,
and then deletes the restricted selection.
(In character mode, the deletion is implemented by sending
the appropriate number of Delete/Backspace characters to the application.)
@item @kbd{Shift-Left} (@code{backward-char-extend})
@itemx @kbd{Shift-Right} (@code{forward-char-extend})
@itemx @kbd{Ctrl-Shift-Left} (@code{backward-word-extend})
@itemx @kbd{Ctrl-Shift-Right} (@code{forward-word-extend})
Moves the end-point of the current selection left or right
one character or word (if @kbd{Ctrl} is pressed).
If there is no selection, the caret position is treated as
a zero-size selection.

If the new end-point is within a current input-editing section,
the cursor is moved to the new end-point.
(Emulated using the appropriate number of Left/Right key-presses.) 
@item @kbd{Ctrl-Shift-@key{S}} (@code{save-as-html})
Save the display to a file.
@item @kbd{Ctrl-Shift-@key{L}} (@code{cycle-input-mode})
Cycle between the input modes: automatic, to line, to character, and back.
The resulting mode is displayed temporarily.
@end table

The following are implemented by most browsers, rather than DomTerm,
so it may not work on all browsers.
@table @asis
@item @kbd{Ctrl-Shift-@key{Plus}}
Zoom in (makes text bigger).
(Does not work in atom-domterm.)
@item @kbd{Ctrl-Shift-@key{Minus}}
@itemx @kbd{Ctrl-@key{Minus}}
Zoom out (makes text smaller).
(Does not work in atom-domterm.)
@item @kbd{Ctrl-@key{0}}
``Un-zoom'' to normal size.
@item @kbd{@key{F11}} (@code{toggle-fullscreen})
Toggle full-screen mode.
@item @kbd{Shift-@key{F11}} (@code{toggle-fullscreen-current-window})
(Not for Electron or Qt.)
Toggle full-screen mode for the current sub-window.
@item @kbd{Ctrl-Shift-@key{I}}
Toogle Developer Window, useful for debugging or examining
the state of the Document Object Model.
@item @kbd{Ctrl-Shift-@key{M}}
Enter @ref{Paging,Paging mode}.
@end table

@subsubheading Scrolling

@table @asis
@item @kbd{Ctrl-Shift-@key{PageUp}} (@code{scroll-page-up})
@itemx @kbd{Ctrl-Shift-@key{PageDown}} (@code{scroll-page-down})
Scroll one ``page'' up or down, respectively.
(Specifically, the viewport height minus a height of one line.)
@item @kbd{Ctrl-Shift-@key{Up}} (@code{scroll-line-up})
@itemx @kbd{Ctrl-Shift-@key{Down}} (@code{scroll-line-down})
Scroll one line up or down, respectively.
@item @kbd{Ctrl-Shift-@key{Home}} (@code{scroll-top})
Scroll to top.
@item @kbd{Ctrl-Shift-@key{End}} (@code{scroll-bottom})
Scroll to bottom.
@end table

See also the bindings for @ref{Paging} mode.
@subsubheading Managing subwindows

The prefix key @kbd{@mux-prefix} when followed by some other key
controls sessions and windows.

@table @asis
@item @kbd{Ctrl-Shift-@key{T}}
Create a new terminal in a new tab.
@item @kbd{Ctrl-Shift-@key{N}}
Create a new terminal in a new pane (sub-window).
The new pane is create to the right or below the current pane,
depending on space.
@item @kbd{@mux-prefix Ctrl-@key{Left}}
Create a new terminal pane to the left of the current one.
@item @kbd{@mux-prefix Ctrl-@key{Right}}
Create a new terminal pane to the right of the current one.
@item @kbd{@mux-prefix Ctrl-@key{Up}}
Create a new terminal pane above the current one.
@item @kbd{@mux-prefix Ctrl-@key{Down}}
Create a new terminal pane below the current one.
@item @kbd{@mux-prefix @key{Left}}
Select the previous pane or tab.
@item @kbd{@mux-prefix @key{Right}}
Select the next pane or tab.
@item @kbd{@mux-prefix @key{d}}
Detach from current session and close the (sub-)window.
@end table

@node Tips and solutions
@chapter Tips and solutions

This section covers various topics, and may evolve to
a Frequently-Asked-Questions page.

See also @ref{Frontends,the page about frontends}
for how they may support some features differently.

@menu
* Tips::  Miscellaneous tips
* Detecting domterm terminal::
* Shell prompts::  Shell prompts and tricks
* Python tips::
* Names and titles::
@end menu

@node Tips
@section Miscellaneous tips

@subheading Copy and Paste

In character mode the ``standard'' keyboard shortcuts for copy and paste
(ctrl-C and ctrl-V) are sent to the backend program.
So instead DomTerm uses ctrl-shift-C to copy the selection to the clipboard,
and ctrl-shift-V to paste the contents of the clipboard.

Some front-end also have menu entries for copy and paste.

The selection is copied as both plain text (@code{text/plain})
and formatted HTML (@code{text/html}) in case the receiving
application can paste the latter.
The HTML is slightly cleaned up from the raw DOM
(in the same way @code{Save as HTML} does).
Note that only inline styling is copied; no attempt is made
to merge in style rules from stylesheets.

The @code{Copy as HTML} command places the formatted HTML
in the clipboard as @code{text/plain} so you can paste the HTML
into a text editor.

@emph{Front-end support}:
Middle-button paste (i.e. clicking the middle button pastes the
contents of the @emph{selection}, rather than the clipboard)
works on qtdomterm, and chrome-based browsers.
It does not work in a Firefox browser window.

@subheading Save the console contents as HTML

Use the keyboard shortcut ctrl-shift-S to save the contents
of the DomTerm console as an HTML file.
Both qtdomterm and the Electron front-end also offer menu entries for this.

The saved file should be viewed with various css stylesheet
files in the @code{hlib} subdirectory.  You can create a symlink
to the @code{hlib} subdirectory in the DomTerm distribution.
The saved file also optionally makes use of some JavaScript,
in the same directory.
The JavaScript isn't essential, but it enables features like
hide/show buttons and dynamic line-(re-)breaking.

Images will preserve their URLs.
Relative URLs may need to be fixed, but absolute ones should be fine.
``Embedded'' images using a @code{data:} URL (including those
loaded with the @code{image} sub-command) will be saved embedded,
and Just Work.

The resulting file is actually an XHTML file, so you can use
XML tools to extract parts from or transform the output.

@emph{Front-end support}: The qtdomterm and the Firefox/XUL applications
bring up a file chooser, and let you save the file in any writable directory.
Other front-end bring up a prompt pop-up and only allow
saving to the Downloads area.
The JavaFX front-end currently does not support saving.

Note that if DomTerm is running in a browser window,
the browser's @code{Save page as ...} command is not useful.
It will save the original bare web page, before any DomTerm interactions
or other JavaScript modification.

@subheading Adding domterm or qtdomterm to the desktop

@subsubheading On Gnome or KDE

Copy @code{domterm/domterm.desktop} or
@code{qtdomterm/qtdomterm.desktop} to either
@code{usr/share/applications} (if @code{domterm} is installed
in @code{/usr/bin} and you want it accessible to everyone),
or in @code{~/.local/share/applications} (if you only wish to make
accessible to a single user).

@subheading Environment variables set

The DomTerm back-ends set various enviromnent variable
when they start up a process.

@code{TERM} is set to @code{"xterm-256color"}.
@code{COLORTERM} is set to @code{"truecolor"}.

The @code{DOMTERM} variable is set to a semicolon-separate
list of information about DomTerm and how it was invoked.
The specific list is subject to change.

An example when running on @code{qtdomterm}:
@example
QtDomTerm;version=0.80;tty=/dev/pts/3
@end example
The Electron front-end may yield:
@example
version=0.80;electron=1.3.13;libwebsockets=2.1.1;tty=/dev/pts/1
@end example

Checking the @code{DOMTERM} variable is a simple way to
check if we're running in a DomTerm terminal.  It is not
foolproof, as explained @ref{Detecting domterm terminal, here}.

@code{WINDOWID} is not set - in fact @code{qtdomterm} unsets it.
There seem to be some problems setting it with Qt.
This variable is not set by Wayland.

@subheading Various programs

@subsubheading ls - showing files as links

Newer versions of the GNU @code{ls} programs support a
@code{--hyperlink} option that creates a @code{file:}
link for each filename.
The escape sequence is also recognized by gnome-terminal,
and should be harmless for other xterm-like terminals.
Consider adding this to your shell init file:
@example
case "$TERM" in
  *xterm*) alias ls='ls --hyperlink=auto';;
esac
@end example

@subsubheading gnuplot

The @uref{http://www.gnuplot.info/,gnuplot} graphing application
has builtin support for
@uref{http://per.bothner.com/blog/2016/gnuplot-in-domterm/,``printing'' graphical output}
to the DomTerm console

@anchor{pandoc-output}
@subsubheading pandoc Printing markdown and other document types

The @uref{https://pandoc.org/,pandoc} program can convert
documents between multiple document formats.
To view a Markdown document @code{doc.md} you can do:
@example
pandoc -t html doc.md | domterm hcat
@end example
You might optionally use the @code{--self-contained} flag to force
images to be ``inlined'' in the terminal output:
@example
pandoc -t html --self-contained --metadata pagetitle=dummy doc.md | domterm hcat
@end example
(The @code{--metadata pagetitle=dummy} is to silence an annoying warning.)

@anchor{man-page-output}
@subsubheading Showing man pages as html

To view the @code{bash} man page inline you can do the following.
This works best with Automatic Pager set.

@example
man -Hcat bash 2>/dev/null|domterm hcat
@end example

@c @subheading Mouse and link handling
@c A program can request notification of mouse events,
@c using protocol used by xterm and other common terminal emulators.
@c If no notification has been explicitly requested,
@c the following default actions are implemented.

@anchor{move-cursor-with-mouse}
@subheading Moving input cursor using mouse clicks

Many interactive programs support simple editing of the current input line.
There are a number of libraries for this (for example as GNU readline),
that support moving the cursor using arrow keys but do not handle the mouse.

In ``readline mode'' a mouse click is translated into arrow key presses
that should move the cursor to the clicked position, assuming
the interactive program understands arrow keys.

There are two ways to enable readline mode for a mouse click:
@itemize
@item
If the Alt key is pressed at the same time as the mouse click.
@item
If both the mouse click target and the current cursor position are in the
same @code{input-line} group (i.e. they're in the same @code{<div>} element
with a @code{class} attribute specifying @code{input-line}).

To create an @code{input-line} group you set the appropriate
escape sequence @samp{\e[15u} in the end of the prompt string,
as show in tip for @ref{bash-shell-prompt}.
If using an input editor library that handles multi-line input commands
(such as JLine3), use the escape sequence @samp{\e[15;2u} instead.
@end itemize

@anchor{linkification}
@subheading Automatic creating of links

DomTerm will scan the output for text that "looks" like a URL or
a mail address, and turn it into a clickable link.
To reduce accidental clicks, these automatic links are only active
if you also hold the control key; you can also use teh context menu.

The links are only visible when you hover the mouse over them.
(This is because what is a link is a guess, and so we don't want to clutter
the display with links that aren't explicitly created.)
You can change the styling: The @code{class} attribute for these links
contains both @code{matched} (because they are generated by pattern matching),
and @code{plain} (because you don't want them styled except when hovering).

By default the only recognized URL schemes
(the part before the colon) are
@code{http}, @code{https}, @code{ftp}, @code{file}, and @code{mailto}.
If the preference @code{open.file.application} or @code{open.link.application}
mentions a URL scheme in a @var{condition} (see @ref{link-handlers,below})
that scheme is added to to the set of recognized URL patterns.

A string starting with @code{www.} is treated as
it it starts with @code{http://www.}.
A string that looks like an email address
(matching the regex pattern @code{^[^@@]+@@[^@@]+\.[^@@]+$})
is treated as if it starts with @code{mailto:}.

Programs that emit explicit links (using HTML escape sequences)
can specify the class as @code{subtle} to indicate links that should be
more subdued than default link styling.
(A @code{subtle} link shows with the normal link color (by default blue),
but underlining is only shown on mouse hover.)

Many programs emit error messages that start with
@code{@var{filename}:@var{line}:} or
@code{@var{filename}:@var{line}:@var{column}}.
These are turned to links of the form
@code{file:/@var{filename}#position=@var{line}}
or @code{file:/@var{filename}#position=@var{line}:@var{column}:}.
If @var{filename} is relative, it is made absolute
if the process directory is set.
(The directory can be set using the escape
sequence @code{"\e]7;file://@var{hostname}/@var{directory}\a"}.
See @ref{tracking-cwd,the shell function @code{print_path_url}} above.)
You can specify an editor or other handler for these special links,
as described below.

@anchor{link-handlers}
@subheading Specifying handlers for clicked links

If you click on a link (with a full URL, not one starts with @samp{#}),
then the request is sent to the backend,
which will invoke an appropriate viewer, such as a browser.

Which application to use depends on two preference variables:
@code{open.file.application} and @code{open.link.application}.
Both are lists of templates, separated by semi-colons or newlines.
When opening a @code{file:} link both template lists are used
(first @code{open.file.application} is tried then @code{open.link.application});
otherwise, only @code{open.link.application} is tried.
Here is the default, in @code{settings.ini} multi-line format:
@example
open.file.application =
 |@{in-atom@}@{with-position|!.html@}atom
 |@{with-position|!.html@}emacsclient
 |@{with-position|!.html@}emacs
 |@{with-position|!.html@}atom
open.link.application =
 |@{!mailto:@}chrome
 |@{!mailto:@}firefox
 |default
@end example

The following templates are supported:
@table @asis
@item @code{emacs}
Invoke the Emacs editor on the specified file and
optional (line,column)-position.
Equivalent to @code{"emacs %+P '%F' > /dev/null 2>&1 &"}.
@item @code{emacsclient}
Ask the Emacs server to open en editor window on the specified file and
optional (line,column)-position.
Equivalent to @code{"emacsclient -n %+P '%F'"}.
@item @code{atom}
Invoke the Atom editor on the specified file and
optional (line,column)-position.
Equivalent to @code{"atom '%F'%:P"}.
@item @code{firefox}
@itemx @code{chrome}
@itemx @code{google-chrome}
Open the specified web browser (@code{chrome} and @code{google-chrome} are
the same).
Equivalent to the browser's executable path followed by @code{" '%U'"}.
@item @code{default}
@itemx @code{browser}
Open the default browser or other registered application.
@item @code{@{}@var{condition}@code{@}}@var{template}
@itemx @code{@{}@var{condition}@code{|}@var{condition}...@code{@}}@var{template}
Skip the @var{template} unless one of the @var{condition}s succeeds.
There can be multiple @code{@{}@var{condition}@code{@}}-groups,
in which cases all must succeed.

A condition can be one of the following:
@table @asis
@item @code{in-atom}
Succceeds if using @code{atom-domterm}.
@item @code{with-position}
Succceeds if the URL ends with @code{#position=@var{position}}.
@item @code{@var{scheme}:}
Matches if the URL-scheme is @var{scheme}.
This is the part before the first colon, such as @code{http:}.
The default uses @code{!mailto:} to supress using firefox or chrome
for email addresses.
@item @code{.@var{ext}}
Matches if the URL has an "extension" matching @var{ext}.
For example @code{.html} matches html files.
@item @code{!}@var{condition}
Suceeds if @var{condition} fails and vice versa.
@end table
@item @var{custom template}
Using @samp{%}-escapes to create a system command.
The following escapes are supported:
@table @asis
@item @code{%U}
Substitute the URL (the @code{href} attribue of the link).
@item @code{%P}
Substitute the value of the (line,colon) file position
from the @code{#position=@var{position}} or the URL.
@item @code{%:P}
@itemx @code{%+P}
Same as respectively @code{:%P} or @code{+%P} if the position
is specified in the URL. Expands to nothing otherwise.
@item @code{%F}
Only succeeds for @code{file:} URL, which is converted to a file name.
You should use quotes: @code{command '%F'}.
@item @code{%%}
A literal @samp{%}.
@end table
After expansion, if there are any unquoted shell special characters
(any of @code{<>|&$}), then the command is executed by a shell.
Otherwise, it is executed directly (in the background, as a daemon).
@end table

@node Detecting domterm terminal
@section Detecting domterm terminal

The @code{DOMTERM} environment variable is normally set when running
under DomTerm. However, using @code{DOMTERM} to determine if the
current terminal is DomTerm is not reliable:
If you @code{ssh}, @code{DOMTERM} will not be automatically set
(a false negative).
On the other hand, if you start some other terminal emulator
like @code{xterm} from within DomTerm, the @code{xterm} will
misleadingly inherit the @code{DOMTERM} variable (a false positive).

The following snippet will unset @code{DOMTERM}
if it does not match the output from the @code{tty} command:
@example
# Check if the DOMTERM variable includes the string "tty=@var{ttyname}"
# where @var{ttyname} is the output from the tty command
case ";$DOMTERM;" in
  *";tty=`tty`;"*) ;;
  *";tty="*) unset DOMTERM;;
esac
@end example
(In a C/C++ program you can use the @code{ttyname} function.)
This takes care of false positives (like running an @code{xterm}
started within DomTerm), assuming DomTerm is started in the normal
way (the @code{domterm} command creating a pty).
However, it does not handle false negatives, such as using @code{ssh}.

More robust is to probe the terminal itself.
You can use the @code{domterm is-domterm} command:

@example
if domterm is-domterm
then
  execute domterm-specific actions
fi
@end example

If you're not sure whether the @code{domterm} program
will be in the @code{PATH}, you can use the following shell code.
It works by sending a special request code
(``Send [Secondary] Device Attributes'') to the terminal; the terminal
sends a response unique to DomTerm.
(While modern terminals will respond to this request, some older ones may not.
Just in case, the script includes a timeout.  Also, it only sends
the request if @code{TERM} includes the string @code{"xterm"}, which
most terminal emulators do, or if @code{DOMTERM} is set.)

@example
probe_domterm() @{
  # probe if TERM unset, or contains "xterm", or DOMTERM is set
  case "$TERM/$DOMTERM" in
    /* | *xterm*/* | */?*)
      echo -en "\e[>0c" >/dev/tty
      read -s -t 1 -d c </dev/tty
      case "$@{REPLY@}" in
        ?"[>990;"*";"*) DOMTERM_REPLY="$@{REPLY@}" ;;
        "") DOMTERM_REPLY="-timeout)" ;;
        *) DOMTERM_REPLY="-non-match"
      esac
      ;;
    *) DOMTERM_REPLY="-not-tried"
  esac
@}

is_domterm() @{
  test -z "$DOMTERM_REPLY" && probe_domterm
  case "$DOMTERM_REPLY" in
    -*) return -1;;
    *) return 0;;
  esac
@}

if is_domterm
then
  execute domterm-specific actions
fi
@end example

The @code{is_domterm} function only tests if the current terminal
is domterm; it does not check if standard input/output have been re-directed.
To check that, you can use the @code{test} builtin with the @code{-t} option:
@example
if test -t 0 -a -t 1 -a -t 2 && is_domterm
then
  execute domterm-specific actions
fi
@end example

@node Shell prompts
@section Shell prompts and tricks

Many interactive REPL-style programs (such as a ``shell") allow
you to customize the string used to prompt for input.
Putting certain DomTerm-specific @ref{Wire byte protocol,escape sequences}
in the prompt enables some
@uref{http://per.bothner.com/blog/2019/shell-integration-proposal/,nice features}.

The following discussion tests @code{$DOMTERM} to decide
whether to do domterm-specific actions.
See @ref{Detecting domterm terminal,how to more reliably test for DomTerm}.

@anchor{bash-shell-prompt}
@subheading Setting the Bash shell prompt

Download @uref{tools/shell-integration.bash,shell-integration.bash}
and @uref{tools/bash-preexec.sh,bash-preexec.sh}.
Then in your @code{~/.bashrc} put something like:

@example
if [ "$PS1" != "" ]
then
  # Optionally override the system default - for all terminals
  PS1='$ ' # or whatever

  if [ -n "$DOMTERM" ]
  then
    source /path/to/bash-preexec.sh
    source /path/to/shell-integration.bash
  fi
fi
@end example

This causes the prompt to have the @code{prompt} style
(specifically to be in a @code{<span std="prompt">} element),
while the remainder of the current line gets the @code{input} style
(specifically, in a @code{<span std="input">} element).
The appearance of these styles can be customized with CSS stylesheets.
Furthermore, this prompt enables text folding:
a @ref{Hide/show buttons,hide/show button}
(click on the @code{▼} character), which hides/shows the output
from the command.

@anchor{zsh-shell-prompt}
@subheading Setting the Zsh shell prompt

Zsh is similar to bash.
Download @uref{tools/shell-integration.zsh,shell-integration.zsh}.
Then in your @code{~/.zshrc} put something like:

@example
if [ "$PS1" != "" ]
  # Maybe change PS1 from the default
then
  if [ -n "$DOMTERM" ]
  then
     source /path/to/shell-integration.zsh
  fi
fi
@end example

@anchor{fish-shell-prompt}
@subheading Setting the Fish Shell (fish) prompt

For @code{fish} (the Fish Shell),
copy @uref{tools/shell-integration.fish,shell-integration.fish}
into the Fish configuration directory @code{$__fish_config_dir}
(which defaults to @code{.config/fish}).
Then place the following in the main fish configuration file
@code{$__fish_config_dir/config.fish}:
@example
if test -n "$DOMTERM"
  source $__fish_config_dir/shell-integration.fish
end
@end example

@anchor{tracking-cwd}
@subheading Tracking current working directory

It is useful for DomTerm to track the working directory of
the process.  One reason is @ref{linkification,creating links} from
compiler error messages.

If you're using the Bash shell, you can set the @code{PROMPT_COMMAND}
to send a special escape sequence, like the following.

@example
# Based on Orwellophile's answer to
# @uref{https://stackoverflow.com/questions/296536/how-to-urlencode-data-for-curl-command,https://stackoverflow.com/questions/296536/how-to-urlencode-data-for-curl-command}
# adding the LC_ALL=C trick from /etc/profile.d/vte.sh (on Fedora27)
print_path_url() @{
  local LC_ALL=C
  local string="$PWD"
  local strlen=$@{#string@}
  local encoded=""
  local pos c o

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=$@{string:$pos:1@}
     case "$c" in
        [-_.~a-zA-Z0-9/] ) o="$@{c@}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="$@{o@}"
  done
  printf "\033]7;file://%s%s\007" "$@{HOSTNAME:-@}" "$@{encoded@}"
@}
test "$PROMPT_COMMAND" = __vte_prompt_command || \
    PROMPT_COMMAND="$PROMPT_COMMAND;print_path_url"
@end example

(On some platforms Gnome Terminal loads @code{vte.sh}
which sets @code{PROMPT_COMMAND} to @code{__vte_prompt_command},
which sends the same escape sequence as @code{print_path_url}.)

@subheading Directory tracking of make

Sometimes @code{make} will recurse into sub-directories.
Error message in those sub-directories may be relative.
The following @code{make} wrapper causes @code{make} to
report to DomTerm the current directory, so it can resolve
relative files names to absolsute @code{file:} links.

@example
BASE_MAKE=/usr/bin/make
if test -t 1 && is_domterm
then
  print_path_url
  export MAKE=`command -v $0`
  $BASE_MAKE "$@@"
  ex=$?
  print_path_url
  exit $ex
else
  $BASE_MAKE "$@@"
fi
@end example
This uses the @code{is_domterm} and @code{print_path_url}
functions defined above.

@node Python tips
@section Python tips

Here are some ideas for using the Python (Python3)
language with DomTerm.
I am not a Python expert, so recommendations for better
ways to do these things are welcome.

@subheading Setup and prompts

In your shell startup file (e.g @code{.bashrc}),
define @code{PYTHONSTARTUP} and @code{PYTHONPATH},
for example:
@example
export PYTHONSTARTUP=$HOME/.config/python/python-startup.py
export PYTHONPATH=$HOME/.config/python
@end example

Copy the following to @code{$PYTHONSTARTUP}:

@example
import os
import sys
is_domterm = os.getenv("DOMTERM", "")!=""
session_key = 'Py%d' % os.getpid()
sys.ps1 = '>>> '
sys.ps2 = '... '

if is_domterm :
    sys.ps1 = '\001\033]133;N;aid=' + session_key + ';cl=m\007\002'+ sys.ps1 + '\001\033]133;I\007\002'
    sys.ps2 = '\001\033]133;P;k=c\007\002' + sys.ps2 + '\001\033]133;I\007\002'
    import domterm.utils as dtutils
    dtutils.set_notebook_mode()
@end example

@uref{images/python-repl.png,@image{images/python-repl}}

Setting @code{sys.ps1} and @code{sys.ps2} wraps the prompts
with DomTerm-specific escape sequences that provide some benefits:

@itemize @bullet
@item
Logical and visual separation between commands,
with different colors for prompt, input, and output.
@item
A ``fold'' (hide/show) mini-button (in the right column):
Clicking on the downward triangle hides all but the first line of the command.
You can see that for the command starting @code{"""Another}:
Input lines beyond the first plus all the output is hidden,
and the button changed to a right arrow.
@item
Clicking with the mouse within the current input line causes the
editing position in the line to be changed.
@end itemize

Installing @uref{tools/python/domterm/utils.py,domterm/utils.py}
defines the following useful functions.

@deffn Function dtutils.print_html (@var{html_string})
Send the @var{html_string} to the terminal, and display it
as would be done in a browser.
@end deffn

@deffn Function dtutils.display_html (@var{html}, overwrite=False, name='python_image', inline=False)
Similar to @code{print_html}, but supports replace-in-place of
existing output:
If @code{overwrite} is @code{False}, it wraps the @var{html} in another
element (a @code{<span>} if @code{inline} or a @code{<div>} otherwise), and
attaches a key @code{name} to that wrapper element.
(This key does not use the @code{id} attribute, and need not be unique.)

If @code{overwrite} is @code{True}, DomTerm searches for the most
recent element that has a key matching @code{name}.
If found, it replaces the contents (child nodes) of that
wrapper element with @var{html}.
@end deffn

@deffn Function dtutils.set_notebook_mode(@var{enable=True})
Controls how auto-display (the ``print'' part of the Python REPL)
handles objects that have a @code{_repr_html_} attribute:
If @var{enable} is True, then @code{_repr_html_} is called,
and the result is printed as if by @code{dtutils.print_html}.
Otherwise, the default display is done.
The @code{python-startup.py} above starts out with @var{enable}@code{=True}.
@end deffn

@subheading Clickable errors

@uref{images/python-error.png,@image{images/python-error}}

The @code{domterm.utils} module overrides Python's @code{sys.excepthook},
as show in the screenshot.  The error message is wrapped in
@code{<span std="err">} elements, which is by default styled with red.

Lines of the form @code{File "@var{filename}", line @var{line}}
are converted to clickable links (visible when you hover over it).
(Note the effective URL in the blue box.)
Right-clicking on the link brings up an @code{Open Link} menu entry,
which normally brings up a text editor at the specified line;
you can @ref{link-handlers,customize this action}.

@subheading Using Pandas

@uref{images/python-pandas.png,@image{images/python-pandas}}

Here is an example using Pandas,
the @uref{https://pandas.pydata.org/,Pandas Data Analysis Library}.

Note how a @code{DataFrame} by default is displayed as an HTML table
(assuming @code{dtutils.set_notebook_mode(True)} has been called).

@subheading Using matplotlib

@image{images/pyplot}

@uref{https://matplotlib.org/,Matplotlib} is popular
plotting library.
If you do:
@example
import domterm.matplot
@end example
it will ``patch'' matplotlib so graphical output is
displayed inline in a DomTerm terminal.
(Note that domterm.matplot is very experimental, so the API may change.)

@deffn Function plt.show (overwrite=do_overwrite, format=@code{"svg"})
Display the current image inline.
By default, the image is presented using SVG (Structured Vector Graphics),
but you can also specify the @code{format} as @code{"png"} or @code{"jpg"}.

The @code{overwrite} argument specifies whether to create a new display
area (@code{overwrite=False}) or re-use the most recent previous one
(if (@code{overwrite=True}); the default is @code{False} for the first
call to @code{show} and @code{True} for subsequent calls.
@end deffn

@node Names and titles
@section Names and titles

Some notes on how sessions and windows are named and identified.

@subsubheading Session name

The session name is an optional user-specified name for a terminal session.
It is recommended that this be unique, but that is not enforced.
The session name can be specified with the @code{-session-name}
(or @code{--sn}) option in the @code{domterm new} command.
You can also dynamically change the session name with an escape sequence:
@example
echo -en "\e]30;@var{session-name}\007"
@end example

It is recommended (but not required) that a session name
have the format of an ``identifier'': The first character should be a letter,
and the rest should be letters, digits, hyphen, or underscore.

@subsubheading Session number

The session number is a positive integer associated with a terminal
session.  It is unique within a domterm server.

@anchor{session-specifier}
@subsubheading Session specifier

The @code{domterm attach} command requires a @dfn{session specifier},
which can be any one of:
@itemize
@item
A session name.
@item
A colon followed by a session number.
@item
A process number (pid).
@end itemize

@subsubheading DomTerm element attributes

Each DomTerm instance in a browser has a corresponding
@code{<div>} element which has @code{domterm} in its
@code{class} attribute.
The @code{<div class="domterm">} element also has the following
identifying attributes, which can be used for session-specific @ref{Styling,styling}:
@itemize
@item
@code{session-number=}@var{session-number}
@item
@code{pid=}@var{pid}
@item
@code{session-name=}@var{session-name}
(but only if the @var{session-name} has been set).
@end itemize

@subsubheading Window name

The window name is a short name displayed for each terminal
in the window title or tab.
It is constructed from up to 3 parts:
@enumerate
@item
The session name, or @code{DomTerm} if the session name is not specified.
@item
If the session name is unset or not unique,
we add a colon and the session number.
@item
If there is more than one window attached to the same terminal,
then we add a period followed by window number.
@end enumerate

@subsubheading Window title and icon title

The window and icon titles are strings sent by the application.
The escape sequences are those of xterm.
They are commonly sent by shells (for example using bash's
@code{PROMPT_COMMAND}) and may include the current directory and maybe
other information.
Most terminal emulators include the window title string
in the window title bar.

@subsubheading Window and tab title bars

When tabs are used, DomTerm displays the window name in each tab.
For active tabs, DomTerm displays both the window name (normally the session name)
and the window title (typically the current directory).
This information may be shown in the main window title bar
as well as the currently active tab.

@node Java tools
@chapter Java tools

The @code{domterm.jar} by default includes various useful Java classes
(in addition
to all the JavaScript and styling for DomTerm itself).

The class @code{org.domterm.javafx.WebTerminalApp} creates a DomTerm
window in the current Java process, without requiring a server.
It is used by the @uref{https://www.gnu.org/software/kawa/REPL-Console.html#Running-a-Command-Interpreter-in-a-new-Window,Kawa @code{-wjavafx} option}.
This does require JavaFX.

The @code{org.domterm.DomHttpServer} is a webserver that can be used
as a server (back-end) component of DomTerm.
It does not use WebSockets but uses plain HTTP (with ``Ajax'') instead.
It only depends on the @code{HttpServer} that is a standard part of the JDK.

The @code{jdomterm} script starts up @code{DomHttpServer} along with
an optional front-end.

@node Uses
@chapter Projects using DomTerm

When you run the @uref{http://www.gnu.org/software/kawa/,@b{Kawa}} REPL
under Domterm, some extra niceties are enabled:
If you print out a @uref{www.gnu.org/software/kawa/tutorial/Pictures.html,picture value} it is shown as an (SVG) image.
You can also print ``html values''.
The default prompt adds folding (a hide/show button), and some structure.
Printing lists and other structures does
@uref{http://per.bothner.com/blog/2017/dynamic-prettyprinting/,dynamic pretty-printing}.
Debug printing of expressions includes folding and pretty-printing.

The @uref{http://www.gnuplot.info/,@b{gnuplot}} graphing utility will print
@uref{https://per.bothner.com/blog/2016/gnuplot-in-domterm/,graphical output}
directly to the terminal if using DomTerm.

The Python
@uref{https://github.com/albertz/py_better_exchook,@b{better_exchook}}
package prints stack traces with extended information such as relevant
local variables. When run in DomTerm, it folds all the details of each
stack frame away by default, and thus provides a much more
comprehensive overview, while still providing all the details when needed.

The @uref{https://github.com/PerBothner/atom-domterm,@b{atom-domterm}}
package for the @uref{https://atom.io/,Atom text editor}
provides a text editor in an Atom pane, fairly well integrated.

There is an @uref{https://github.com/PerBothner/theia,experimental fork}
of the @uref{https://github.com/PerBothner/theia,@b{Theia} IDE} to
use DomTerm for its terminal emulator.

@node To do
@chapter Ideas and projects for DomTerm

@subheading Terminal emulator functionality

@subsubheading Document any discrepancies from xterm and ANSI

While implementing all of the
@uref{http://invisible-island.net/xterm/ctlseqs/ctlseqs.html,features of xterm}
is probably not feasible, we should at least have a list of
anything we don't implement, or implement differently from xterm.

See also the @uref{http://www.ecma-international.org/publications/standards/Ecma-048.htm,ECMA-48 standard}.

Error recovery and state transitions should follow
@uref{http://www.vt100.net/emu/dec_ansi_parser,this}.

@subsubheading Embedded HTML

If the @code{src} attribute of @code{<img>} is a relative URL
(or optionally a @code{file:} URL), then
the @code{domterm html} command should read the file
and embed it as a @code{data:} URL.
(As long as no @code{--base} option is specified.)

@c @subsubheading Support Sixel graphics
@c
@c @uref{https://en.wikipedia.org/wiki/Sixel,Sixel} is an old raster
@c image format supported by DEC terminals and some programs, including xterm.
@c It is interesting because some programs (such as gnuplot) can use Sixel
@c to interleave graphics and text, without requiring separate windows.
@c
@c This @uref{http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/,JavaScript utility} may be useful in converting raster data (post-sixel-decoding) to PNG, which could the be displayed with a @code{data:} URI.

@subsubheading Highlighting

We may want to support syntax coloring (including in REPL input lines)
and other highlighting.
If the DomTerm element is not the only element in the @code{<document>}'s
@code{<body>} then the selection may be lost to another ``widget''
unless we simulate the selection as a highlighted range.
The @uref{https://markjs.io/,mark.js} package may be useful.

@subsubheading Improve copy and paste

Think about how to do multi-line paste.

Copying to HTML should convert @code{<div class='domterm-pre'>} to
@code{<pre>} so pasting without stylesheets works better.

@subsubheading Scroll limit

Handle saving and truncating scrolled-out output.
Most terminal emulators have ``max number of lines in scroll buffer'' setting.
What makes this a little tricky is because there may multiple
windows attached to the same session.  So this would require changes
to the protocol for saving/restoring and syncorinizing sessions.

@subheading Support other embeddable browsers

Some toolkits to explore for integrated browser/application:
@itemize
@item
@uref{https://bitbucket.org/chromiumembedded/cef,Chromium Embedded Framework}
@item
@uref{http://lwn.net/Articles/647921/,Mozilla Servo}
@item
@uref{http://atom.io,Atom/Electon}
A possible start is @uref{https://atom.io/packages/term2,term2}.
@item
@uref{http://nwjs.io/,NW.js} (formerly node-webkit).
@item
@uref{http://webkitgtk.org/,WebKitGtk+}
@item
@uref{https://github.com/zserge/webview/,webview} uses
Cocoa/WebKit on macOS, gtk-webkit2 on Linux and MSHTML (IE10/11) on Windows.
It appears to work, and to be slightly zippier.
@end itemize

In @code{qtdomterm} consider using @code{QDockWidget} so panes
can be moved between windows.

Implement ``drop-down'' mode.

@subsubheading Using alternate window managers

DomTerm includes a ``window manager''
(implemented
using @uref{http://golden-layout.com/,GoldenLayout})
that supports panes and tabs.
If DomTerm is integrated in an application with its
own window manager, such as Atom or Visual Studio Code,
it would make sense to instead integrate with the latter manager.

Theia and Jupyter use @uref{https://phosphorjs.github.io/,PhosphorJS}.

Similarly, when running under a
@uref{https://en.wikipedia.org/wiki/Tiling_window_manager,tiling window manager}
using the latter to manage panes and tabs is likely preferable.

@subsubheading Compare other terminal emulators

@uref{https://termysequence.io/,TermySequence}
has lots of features.
@uref{https://github.com/TermySequence/termysequence,Source code.}

@subsubheading Tools and examples for Atom or Electron

Atom packages are in @code{~/.atom/packages}.
Seemingly helpful tutorial:
``@uref{https://www.sitepoint.com/write-atom-packages-using-vanilla-javascript/,
How to Write Atom Packages Using Vanilla JavaScript}''.

Web browsers for Atom include
@uref{https://github.com/gabceb/atom-web-view,atom-web-view} (aka web-view),
or @uref{https://github.com/gstack/atom-browser-webview,atom-browser-webview}.
Neither of them work well, probably because of Atom API changes.

Terminal emulators for Electron:
@url{https://github.com/sedwards2009/extraterm,Extraterm} (interesting, uses CodeMirror).
@url{https://github.com/vshatskyi/black-screen,Black Screen} (extra shell features).

Terminal emulators for Atom:
@uref{https://atom.io/packages/term3,Term 3}.
@uref{https://atom.io/packages/terminal-plus,terminal-plus}.
@uref{https://atom.io/packages/atom-terminal-panel,atom-terminal-panel}.
@uref{https://github.com/romgrk/termrk,Termrk}.

@uref{https://www.npmjs.com/package/electron-tabs,Tabs for Electron}
(compatible with @uref{https://github.com/bevacqua/dragula,dragula}).

Various Electron @uref{https://github.com/sindresorhus/awesome-electron,Awesome links}
@uref{https://electron.atom.io/community/,Community links}.

@subheading Extend use of keymaps

Keybindings for line-edit mode are controlled
by a keymap data structure
(based on @uref{https://github.com/marijnh/browserkeymap,browserkeymap},
and the defaut bindings can be changed by the serrttngs file.
This needs to be generalized to other modes.

@subheading Readline style hooks and improvements

The idea is the line-editing mode would provide the
functionality of readline or similar programs.

@subsubheading Readline hooks to recognize when it's running under DomTerm

The idea is readline would delegate basic line editing
(and re-display) to DomTerm, while DomTerm would call back
to readline for command completion, history, etc.

This has a couple of advantages over plain readline:
One is to have mousing actually work (i.e. no more
readline not being able to move the cursor on mouse-clicks).
Another advantage is local editing, which is a benefit
over slow links (such as satellites) or when you don't
want to interrupt the server needlessly.

Readline should at least behave as if the screen width were infinite,
delegating line-wrapping to DomTerm.

@subsubheading Event forwarding to inferior

A process may "print"/paint graphics with event handlers.
For example a button.  On clicking the button, the click
should be bundled as an event objects sent back to the inferior.

@subsubheading Shift selection

Zsh editor (zle) supports Emacs-like mark and region.
Emacs has a ``shift-selection'' state, which we would like to emulate.

On mouse selection, or a shift-motion command (such as Shift-Right),
should set the region in shift-selection mode:
We send Ctrl-Space to the client (setting the mark) at the ``anchor''
and move the cursor as needed.  We also (locally to DomTerm) set the
``shift-selection'' mode.
If when in shift-selection mode any (special) key is pressed @emph{without} the shift
modfier, then shift-selection mode is turned off, the selection is collapsed,
and Escape - Ctrl-Space is sent to decativate the region.

Can do this lazily, so we only get the selection highlighting:
On mouse selection or shift-motion command

@subheading JavaScript extension

It may be useful to load new JavaScript libraries into DomTerm.
We can do this when loading a DomTerm web-page, by
having the server add @code{<script>} elements to the
generated web page.
More flexible is do it dynamically:
@example
domterm load-javascript "foo.js"
@end example
This works by essentialy doing @code{createElement("script")}.

For this to be useful we need to better define the DomTerm JavaScipt
API with extension hooks.

@subsubheading Plotting

A useful extension library would be a plotting library.
The @uref{https://plot.ly/javascript/,Plotly} looks powerful
(and big), and controlled by a JSON-able data structure.

@subheading Saved notebooks

A "notebook" is a saved (and potentially executable)
representation of a session.

IPython/Jupyter has a
@uref{https://ipython.org/ipython-doc/3/notebook/nbformat.html,JSON encoding for "notebooks"}.
This is flexible and extensible, but requires special tools.
See also @uref{https://medium.com/netflix-techblog/open-sourcing-polynote-an-ide-inspired-polyglot-notebook-7f929d3f447,Polynote}.

The DomTerm notebook format should just be a simple html page.
Essentially a serialization of the DOM.  The page may include
some generated header information and metadata.  It may include
references to JavaScript that would allow former execution,
as well as viewing actions (like hide/unhide, wrap-to-fit, etc).
This references should be simple and relative, so the actual
JavaScript loaded can depend on context.

The format must be XML-compatible (XHTML) so it can be
parsed by XML tools such as XSLT.

Specific format TBD.

The html page must be viewable and look reasonable in a browser even
if JavaScript library or style files are missing or JavaScript is
disabled.

A notebook may be include additional resources in other files,
such as images.  If notebook  consists of multiple files,
they should be bundled in a zip archive (like LibreOffice does).

Tools to convert to and from Jupyter format would be nice,
so we should avoid gratuitous conceptual incompatibility.

@subheading Detachable sessions

Detachable sessions (similar to GNU Screen and tmux) means that a front-end
can disconnect from a session, while the session (child process) persists.
The same or a different front-end can later re-attach to the session.

DomTerm implements detachable sessions using a combination
of check-pointing the display state, plus having the backend
recording output commands since last check-point.

This can can handle unexpected detaches, as when a
connection dies. However, it's a bit heavy-handed:
check-pointing should only save parts of the state that have changed.
(This gets a bit tricky when there may be multiple windows displaying
the same session, combined with not-yet-implemented auto-trunctating of
old output.)

See also @uref{https://mosh.org/,Mosh} (also @uref{https://lwn.net/Articles/722923/,LWN article}), and @uref{https://mistertea.github.io/EternalTCP/,EternalTerminal}.

@subheading Remote sessions

A DomTerm front-end can used used to display
sessions running on remote backends.
The challenge is having the remote sessions persist if connection is lost.
Managing state for a detached session is handled by the domterm backend,
which therefore needs to run remotely.  However, the part that
manages windows and commands needs to run locally.

The solution is to run the backend in proxy mode.
Supposed the user types:
@example
domterm [@var{user}]@@@var{host} @var{command}
@end example
This can be implemented bying having the (local) backend do:
@example
ssh [@var{user}@@]@var{host} domterm --browser-pipe @var{command}
@end example
(A password may have to be requested.)
The @code{--browser-pipe} option is a special kind of window-specifier:
Instead of output being sent to the browser, it is written to stdout;
input from stdin is (mostly) sent to the @var{command}.
(``Mostly'' because the remote domterm processes certain
escape sequences.  For example the @code{"WS"} sequences
is used to change the pty window size.)

The local domterm backend acts as a proxy for the remote backend.

It is also useful to be able to connect to a remote backend, directly from
a browser, without having to install a local @code{domterm} command.
That requires a remote @code{https} server, and has some more
permission and security complications.

@subheading Documentation

Create screencasts, maybe using @uref{https://github.com/phw/peek,Peek},
or Byzanz.
Consider using @uref{https://github.com/critiqjo/key-mon,key-mon}
(available on Fedora) to display clicks etc.

@node Technical documentation
@chapter Technical documentation

@menu
* DOM structure::
* Wire byte protocol::
* The DomTerm JavaScript class::
* Processes and security::
* Architecture notes::
@end menu

@node DOM structure
@section DOM structure

The JavaScript code works by DOM manipulations of
a top-level @code{div} element, and assume that element
has a certain well-behaved form.

@table @asis
@item @var{domtern-element} ::= @code{<div class="domterm">} @var{domterm-toplevel} @code{</div>}
A top-level ``DomTerm window'' is a @code{<div>} element
whose @code{class} is @code{domterm}.

@item @var{domterm-toplevel} ::= @var{internal-div-elements} @var{domterm-buffer}@sup{+} @var{spacer}@sup{*}

You don't need to create @var{domterm-toplevel} - it is created and managed by
DomTerm, based on data from the back-end.

@item @var{domterm-buffer} ::= @code{<div class="interaction" buffer="@var{name}">} @var{block-content}@sup{*} @code{</div>}

There are one or two @var{domterm-buffer} elements,
for respectively the ``normal'' and ``alternative'' screen buffer.
These contain all the ``actual'' content.
If there is a single buffer, the @var{name} is @code{"main only"};
if there are two buffers, the respective values for @var{name}
are @code{"main"} and @code{"alternate"}.

@item @var{internal-div-elements}
One or more invisible @code{<div>} elements used by the implementation.

@item @var{spacer} ::=  @code{<div class="domterm-spacer"/>}

Blank space at the bottom, used to support scrolling.

@item @var{block-content} ::= @var{logical-line} | @code{<div>} @var{block-content}@sup{*} @code{</div>} | @var{opaque-line}

@item @var{logical-line} := @code{<div class="domterm-pre">} @var{line-content}@sup{*} @var{hard-nl} @code{</pre>}
@itemx @ @  | @code{<pre>} @var{line-content}@sup{*} @var{hard-nl} @code{</pre>}
@itemx @ @  | @code{<p>} @var{line-content}@sup{*} @var{hard-nl} @code{</p>}
A @var{logical-line} is one or more ``rows'' (separated by @var{soft-line}s),
consisting of character and other @code{inline} data,
ending with @var{hard-nl} representing an explicit newline.

The intent is that @code{<div class="domterm-pre">}, @code{<pre>} and @code{<p>} are treated logically
the same, but @code{<div class="domterm-pre">} (or @code{<pre>}) will be monospace,
while @code{<p>} can use other fonts and styling.
The line-breaking algorithm uses the width of the line,
not the number of characters, so it should also work for @code{<p>} elements.

Normal terminal output will create @code{<div class="domterm-pre">} elements,
rather than @code{<pre>}, because @code{Copy} command on some browsers (at least
current Firefox) adds extra newlines.

@item @var{line-content} ::= @var{text} | @code{<span>} @var{line-content}@sup{*} @code{</span>} | @var{soft-nl} | @var{input-line} | @var{other-content}

@item @var{hard-nl} ::= @code{<span line="hard">&#A;</span>}
An explicit newline. Has a @code{"\n"} text node as its sole child.

@item @var{soft-nl} ::= @code{<span line="soft"></span>}
An implicit newline, inserted by DomTerm when a line overflows.
Has no explicit text content, but CSS adds a @code{"\n"}
as @code{before} content.
CSS by default also add a continuation arrow.

@item @var{input-line} ::= @code{<span id="input1" std="input" contenteditable="true">} @var{text} @code{</span>}
The location of the input cursor.
In char-mode the @var{text} is empty.  In line-mode contains
the current input line.  Also used for previous input lines,
but without @code{contenteditable} set.
Referenced by the @code{inputLine} field of the DomTerm object.

@item @var{opaque-line}
A non-empty block-level element that isn't navigable
at the level of rows and columns.
For example a @code{<table>}.
It is treated as a single empty line.
@end table

@subsubheading Lines and columns

This section discusses the mapping between the nested DOM structure
and the terminal's lines and columns.

In a well-formed tree, all line-breaks have the form
of @code{<span>} element with a @code{line} attribute.
The child of a @code{<span>} element is either a text node
consisting of only a newline, or there are no children
(and a newline is added using CSS styling).  Either way it is
treated as a single line-break.

Inserting HTML may also include @code{<br>} elements and text
containing newlines.  These are not handled consistently.
Ideally, we should convert newlines in @code{pre}-style elements
to @code{<span line="hard">} elements.

The last child of a non-empty block-level element (@code{<div>}, @code{<pre>}
etc) should be either another block-level element or a line-break.
(We could also allow a @code{<span>} whose last element is a line-break,
but isn't clear if this is useful or desirable.)
Inserting HTML should insert if needed final line-break (though
it currently doesn't).  Alternatively, we can treat a missing line-break
as an implicit line-break; currently this is not handled consistently.

A ``line'' is then the text and elements between two
(explicit or implicit) line-breaks.

``Opaque elements'' include @code{<img>}, @code{<svg>},
@code{<object>}, and @code{<iframe>}.  These are treated
as single character, taking up a single ``column''.

The ``characters'' of a line are those in text nodes in the line, plus
opaque elements.

@anchor{command group}
@subsubheading Command groups

A @dfn{command group} is the set of input and output lines for a single
user command.

@table @asis
@item @var{command-group} ::= @code{<div class="command-group">} @var{command-input-line}@sup{+} @var{command-output}@sup{?} @code{</div>}
Usually there is a single @var{command-input-line},
but there may be more than one if there are continuation lines.
@item @var{command-input-line} ::= @code{<pre>} @code{<span std="prompt">} @var{prompt-text} @code{</span>} @code{<span std="input">} @var{input-text} @code{</span>} @code{</pre>}
A @var{command-input-line} is @code{logical-line} which (at least normally)
has the form of a prompt followed by the typed input command.
@item @var{command-output} ::= @code{<div class="command-output">} @var{block-content}@sup{+} @code{</div>}
The output from the command.
Normally, each @var{block-content} is a @var{logical-line}.
The @code{<div class="command-output">} element may have the
@code{domterm-hidden} attribute if it is hideable.
@end table

@anchor{Hide/show buttons}
@subsubheading Hide/show buttons

A hide/show button is a clickable toggle ``button'' that controls
whether certain ``associated output'' is shown or hidden.
For example the ``associated output'' of a shell command could be the
set of output lines from the command.  Initially, the output is in
the shown state, and the button displays a ``hide'' icon.
Clicking the button will hide output lines, as well as changing the
button to display a ``show'' icon.  Clicking the button again
changes the icon to the ``hide'' icon and unhides the output lines.

@table @asis
@item @code{<span std="hider"} [@code{domterm-hiding="true"} or @code{"false"}]@code{>} @var{hide-icon} @code{</span>}
This is a hide/show button.  The @var{hide-icon} is either empty or one of
the strings with odd-numbered index in DomTerm's
@code{showHideMarkers} property.
The value of the @code{showHideMarkers} property is an array of strings,
where the even-numbers elements are ``show'' icons, and
the following odd-numbered elements are the corresponding ``hide'' icons.
It is suggested (but not required) that these icons be single
graphic characters.
Good choices are @code{"\u25B6"} (@code{@U{25B6}} ``black right-pointing triangle'')
for ``show'', and
@code{"\u25BC"} (@code{@U{25BC}} ``black down-pointing triangle'') for ``hide''.

The attribute @code{domterm-hiding} must be @code{"true"}
or @code{"false"}; if missing it defaults to @code{"false"}.
Its value is flipped on each click,

If you are unsatisfied with the existing icon choices you can
either set @code{showHideMarkers} to other strings,
or you can use CSS to change the look of the icons.
For example to use @code{[-]} and @code{[+]} use these CSS rules:
@example
span[std="hider"][domterm-hiding="true"]:after @{ content: "[+]" @}
span[std="hider"]:after @{ content: "[-]" @}
@end example
In this case, you probably want the @var{hide-icon} text in
the @code{<span>} to be empty.
@end table

The ``associated output'' for a hide/show button
is the set of sibling elements following the button,
as well as sibling elements of the button's parent
(assuming that parent is a @code{<pre>} or @code{<p>} element).
Only elements that have the @code{domterm-hidden} attribute are affected.
Hiding is done by changing the value the @code{domterm-hidden} from
@code{"false"} to @code{"true"}; un-hiding changes it back to @code{"false"}.
This is using a CSS style rule that sets the @code{display} property
of an element to @code{none} when @code{domerm-hidden} is @code{true}

A future extension would allow @emph{lazy} associated output:
The initial state is hidden, and the back-end does not provide
the output until it is requested, by clicking the hide/show button.
Lazy output is useful for displaying and inspecting large
(or even infinite) data structures, such as as a directory hierarchy
or a complex object graph.

@subsubheading Alternate screen buffer

Xterm supports an ``alternate screen buffer'' which is used
by character-based programs like emacs.
Switching to the alternate buffer creates a new @code{<div class="interaction">},
with a @code{buffer} attribute valued @code{"alternate"}
(and an @code{id} attribute of the form @code{@var{xxx}_alternate}).
It is the sibling of the normal screen buffer,
which has a @code{buffer} attribute valued @code{"main"}
(with @code{id} attribute of the form @code{@var{xxx}_normal}).
This @code{<div>} contains one or more @var{logical-line}s.
Returning to the normal screen deletes the @code{<div>} for the
alternative screen, along with all of its contents,
and changes the @code{buffer} attribute back to @code{"main only"}.


@anchor{DOM-pretty-printing}
@subsubheading Pretty-printing and line-breaking

@table @asis
@item @code{<span class="pprint-group">} @var{contents} @code{</span>}

A ``logical block'' of content that should be printed together,
on the same line, if possible.
If there is a prefix, it precedes the @code{"pprint-group"} element.
If there is a per-line prefix,
it is in a @code{<span class="pprint-prefix">} preceding element.
If there is a block suffix, it follows the @code{"pprint-group"} element.

@item @code{<span class="pprint-prefix">} @var{per-line-prefix} @code{</span>}
A per-line prefix.  This must be the previous sibling
of a @code{<span class="pprint-group">} element.
It is displayed just before the logical group, and also
for each continuation line, at the same indentation.

@item @code{<span class="pprint-indent" delta="@var{num-chars}" />}
@itemx @code{<span class="pprint-indent" block-delta="@var{num-chars}" />}
@itemx @code{<span class="pprint-indent" indentation="@var{text}" />}

Add extra indentation to following continuation lines.
A @code{delta="@var{num-chars}"} changes the indentation
to @var{num-chars} characters relative to the current horizontal position.
A @code{block-delta="@var{num-chars}"} changes the indentation to
@var{num-chars} characters relative to the start of the current logical block.
Specifying@code{ indentation="@var{text}"} specifies @var{text}
as an extra per-line prefix.
The extra indentation is reset at the end of the logical block.

@item @code{<span line="@var{kind}" />}
Represents a conditional newline of the specified @var{kind},
which can be @code{fill}, @code{linear},
@code{miser} (currently the same as @code{fill}),
or @code{required}.

@item @var{indentation} ::= @code{<span class="pprint-indentation">..</span>}
These represent actual calculated indentatation.
They are only inserted when and if a line-break is inserted,
and removed if the line-break is removed.

@item @code{<span line="@var{kind}" @var{line-attribute}... > [@var{pre-break-child}] [@var{non-break-child}] [@var{indentation}] [@var{post-break-child}] </span>}
@itemx @code{@var{line-attribute} ::= breaking="yes|no" | pre-break="@var{pre-break-text}" | post-break="@var{post-break-text}"}
@itemx @code{@var{pre-break-child} ::= <span class="pprint-pre-break">@var{contents}</span>}
@itemx @code{@var{post-break-child} ::= <span class="pprint-post-break">@var{contents}</span>}
@itemx @code{@var{non-break-child} ::= <span class="pprint-non-break">@var{contents}</span>}
A generalized optional line-break.  You can specify contents to
insert @emph{before} the break (when there is a break) either with
a @code{pre-break} attribute or with a @code{pprint-pre-break} element.
Similarly, content after the break
can be specified using either a @code{post-break} attribute
or a @code{pprint-post-break} element.
(The @var{indentation}, if any is automatically inserted before the post-break-content.)
To specify contents to be used when there is no break,
use a @code{pprint-non-break} element.
@end table

@subsubheading The caret node
@table @asis
@item @code{<span std="caret">}@var{caret-text}@code{</span}
@itemx @code{<span std="caret" value="}@var{caret-text}@code{"></span}

This is used to display the caret position.  If the caret is a block
or underline, then the @var{caret-text} is the character at the caret
that is styled with inverse video or an underline.
If the caret is at the end of the line, then the @var{caret-text}
is a single space, and we use a @code{value} attribute, because the
space is not actually part of the line.
If the caret is followed by other text (on the same line),
then the @code{caret-text} is a text node consisting of the
first character of the following text (which is removed from
the following text).

If the caret is a vertical-bar then there may still be a @code{caret} element,
but the @var{caret-text} is empty.
@end table

@subsubheading Predictive update

If you type a printing character (while in char-mode), DomTerm
sends the character to the process, which will then echo (display) it.
If there is a slow network connection the delay between when you type
the character and the echo can be disconcerting and slow down your typing.
To avoid this, DomTerm will @emph{tentatively display} it right after
you type it, without waiting for the echo.
The tentative text is displayed in a @code{pending} element, as
a @var{new-text} text child:
@table @asis
@item @code{<span class="pending" old-text="@var{old-text}">}@var{new-text}@code{</span>}
@end table
Text (specifically the @var{new-text}) is by default
displayed with a light gray background to show that it is tentative.

Typing the Left or Right arrow keys may create a @code{Pending}
element where both the @var{old-text} and the @var{new-text}
are the same string - the text that was moved over.
Typing Delete or Backspace has just an @var{old-text} attribute
for the text that has been (tentatively) deleted.
Either Left or Backspace adds a @code{direction="Left"} attribute;
either Right or Delete adds a @code{direction="Right"} attribute.

There is usually at most a single @code{pending} element, but in principle
there can be many.  A @code{pending} node may contain children that are nested
@code{pending} or @code{std="caret"} elements.

Before output is processed (or after a timeout) all existing pending nodes
are ``undone'' (in reverse order) so the DOM state matches that
expected by the application:
All @var{new-text} elements are reverted back to the @var{old-text} values,
and the caret may also be adjusted.
Typically the received output wil be ``echo'' that has the effect of
updating the state to match the pending operations - but now
as definite updates from the application, rather than pending.

@node Wire byte protocol
@section Wire byte protocol

DomTerm mostly handles standard @uref{https://en.wikipedia.org/wiki/ANSI_escape_code,ansi/xterm escape sequences}.
This section documents DomTerm-specific extensions.
(@emph{Future:} We should also document what xterm features aren't implemented.)

@strong{The following code sequences
may change based on experience and feedback.}

@emph{Notation:}
Literal characters are written as quoted string literals with
escape sequences as understood by bash's @code{echo -e}.
Specifically @code{"\e"} is an escape; @code{"\a"} is alert (bell);
@code{"\xHH"} is the 8-bit characters whose value is HH (hexadecimal).

@subsection Special sequences sent by back-end and handled by DomTerm

@table @asis
@item @code{"\e[3J"}
Erase the scrollback buffer (i.e. any lines above the home line).
(This is an xterm feature.)
@item @code{"\e[7J"}
Delete all lines in the buffer (including scrolled lines),
except the current line.

@item @code{"\e[>0c"}
Request Secondary Device Attributes.
(This is a standard request for xt100style terminals, including xterm.)
DomTerm responds @code{"\e]990;XXYYYZZ;0c"},
where the number @code{XXYYYZZ} is derived from the DomTerm
version number @code{"XXX.YYY.ZZ"}.

@item @code{"\e]7;file://" @var{hostname} "/"@var{directory} "\a"}
Specifies the current directory of the process.
(This is generated by some shells by default.
On Fedora this is done by the script @code{/etc/profile.d/vte.sh}.)

@item @code{"\e]8;"} @var{options} @code{";"} @var{url} @code{"\a"} @var{text} @code{"\e]8;;\a"}

Create a link with the given @var{url} and
display @var{text} (which can contain other escape sequences for styling).
The @var{options} are ignored.  The link has @code{class="plain"}.
See @uref{https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda,this link}.

@item @code{"\e]30;" @var{name} "\a"}
Sets the ``session name'' to @var{name}, which is shown in the window title.
Specifically sets the @code{name} attribute of the top-level
domterm @code{<div>} node to @var{name}.  This can be used
to enable stylesheet rules to only apply to specfic DomTerm windows.
If an active CSS stylesheet contains:

@example
div.domterm[name="@var{name}"] @{ @var{rules} @}
@end example

then the @var{rules} are only active for a DomTerm element whose
session name is @var{name}.

@item @code{"\e]72;" @var{html-text} "\a"}
Insert HTML text (a fragment).
The @var{html-text} can be a complete html file,
but elements such as @code{<html>}, @code{<body>} or @code{<style>}
are ignored.

The HTML is sanity-checked for safety.

A @code{<base href="@var{base-url}"/>} element in the @var{html-text}
is skipped, except that the @var{base-url} is used for subsequent
relative URLs (for @code{src} attributes for @code{<img>} elements,
and for @code{href} attributes for @code{<a>} elements) in the same
@var{html-text}.

The actual policy for allowed elements and attributes
can be changed by overwriting the @code{elementInfo}
and @code{allowAttribute} functions in @code{terminal.js}.
The default policy is a work-in-progress.

@item @code{"\e]721;" @var{key} @code{";"} @var{html-text} "\a"}

Replace previously-inserted HTML.
Looks for the latest element (in document order)
whose @code{class} includes @code{can-replace-children}
and that has a @code{replace-key="@var{key}"} attribute.
Essentially sets the @code{innerHTML} to @var{html-text}
(after safety-scrubbing).

@item @code{"\e]73;" @var{keyName} "\a"}
@itemx @code{"\e]74;" keyName "\a"}
@itemx @code{"\e]73;" @var{keyName} "\t" @var{kstr} "\a"}
@itemx @code{"\e]74;" @var{keyName} "\t" @var{kstr} "\a"}
Simulate pressing @var{keyName}.  Used by auto-line mode.
The @code{73} variant supresses echo.

@item @code{"\e]104;" @var{op} @code{,} @var{url} "a\n"}
Create a new sub-window (pane), based on the @var{op}.
This displays the @var{url} webpage in an @code{<iframe>}.

@item @code{"\e]105;" @var{op} @code{,} @var{saved-url} "a\n"}
Create a new sub-window (pane), based on the @var{op}.
This is displays the @var{saved-url}, a previously saved terminal session.

@item @code{"\e[20u"}
Starts a "fresh line": If at the beginning of line, does nothing.
Otherwise moves to the start of a new line.

@item @code{"\e[80;97u"}
@itemx @code{"\e[80;99u"}
@itemx @code{"\e[80;108u"}
@itemx @code{"\e[80;112u"}
Set input editing mode.
The value 99 (@code{'c'}) sets character mode;
the value 108 (@code{'l'}) sets line-editing mode.
The value 97 (@code{'a'}) set automatic mode,
which switches between character mode and line-editing mode
based on the mode of the inferior process (when using a PTY).
The value 112 (@code{'p'} for "pipe") is like line-editing mode,
but the inferiors doesn't echo the input, so we have to do it.
This mode is useful when the input is a pipe or some other non-tty stream.

@item @code{"\e[81u\n"}
Requent to send the state of the window as a @code{WINDOW-CONTENTS} response.

@item @code{"\e]88;"} @var{object} @code{"\a"}
Change various properties of the internal DomTerm object,
based on properties of @var{object}.
For example to change the character used hide characters
in @ref{password-fields,password fields} to ``bullet'' you can do:
@example
echo -en '\e]88;@{"passwordHideChar": "\\u2022"@}\a'
@end example
Allowed properties include:
@code{columnsMinimum},
@code{passwordHideChar}, @code{passwordShowCharTimeout},
@code{deferredForDeletionTimeout},
@code{historyStorageKey}, @code{historyStorageMax}.

@item @code{"\e[89;"} @var{settings} @code{"\a"}

@emph{Internal use: }
Update user @ref{Settings,settings}.

@item @code{"\e[90;" @var{op} "u"}
Create a new sub-window (pane), based on the @var{op}.

@item @code{"\e[92;" @var{op} "u"}
Temporarily enable auto-paging if @var{op} is 1.
Disables it if @var{op} is 2 (- only if temporarily enabled).
A simplified @code{more} program could temporarily enable auto-paging,
print some amount of output, and then revert the state.
This used by the @code{domterm help} command.

@item @code{"\e[99;99u"}
End-of-file on the output stream.
Calls the @code{eofSeen} method of @code{DomTerm},
which may close the current window or other appropriate action.

@item @code{"\e]103;"} @var{state} @code{"\a"}
Send saved state to new window.

@end table

@subsubsection Command parts (shell integration)

The escape sequences will be deprecated
in favor @uref{https://gitlab.com/PerBothner/terminal-specifications/blob/master/proposals/semantic-prompts.md,these sequences} (not yet finalized).

@table @asis
@item @code{"\e[12u"}
Start of error output.
DomTerm places the following text inside a @code{<span>} element
whose @code{std} attribute has the value @code{"error"}.
The default style is to display the text in red.

@item @code{"\e[11u"}
End of error output.

@item @code{"\e[14u"}
Start of prompt.
DomTerm places the following text inside a @code{<span>} element
whose @code{std} attribute has the value @code{"prompt"}.
The default style is to display the text in green.

@item @code{"\e[13u"}
End of prompt.
The prompt is included in selections that surround it.

@item @code{"\e[18u"}
End of non-selectable prompt.
The prompt is not part of the text content of the document,
and is not included in selections.
The prompt string must be plain text with no styling.
You can use this for all prompts, but it is especially recommended
for continuation lines, such as the shell's @code{PS2} prompt.

@item @code{"\e[15u"}
@itemx @code{"\e[15;"} @var{edit-mode} @code{"u"}
Start of an input line.
This also implicitly ends a (selectable) prompt.
The input line is implicitly terminated by a @code{'\n'}
(carriage return).

The @var{edit-mode} specifies what kind of input-line-editing is
in effect, which affects how mouse clicks are handled.
If @var{edit-mode} is 0, it means there is no input-line-editing,
and no arrow key support by the client;
the value 1 (the default) means single-line editing (like GNU readline);
the value 2 means the first line of a multi-line editing group (as @uref{https://github.com/jline/jline3,JLine3}).

@item @code{"\e[16u"}
@itemx @code{"\e[17u"}

Delimit a @ref{Hide/show buttons,hide/show "button"}, with @code{"\e[16u"} before
and @code{"\e[17u"} after.
The text between should be 1 or 2 characters (code points).
The first character is displayed when contents are visible (shown)
and that when clicked causes contents to be hidden.
If there is a second character, it is the character used when
contents are hidden
and that when clicked causes contents to be shown.
If the first character matches a "hide" entry in the predefined
@code{showHideMarkers} table, then the second character
defaults to the corresponding "show" entry.

@item @code{"\e[83;"} @var{mode} @code{"u"}
Delimit a span to be controlled by a show/hide button (previously printed).
If @var{mode} is 1 or 2 it starts a span, while @var{mode} 0 ends the span.
The span is initially visible if @var{mode} is 1, and
is hidden if @var{mode} is 2.

@item @code{"\e]119;"} @var{group-id} @code{"\a"}
@itemx @code{"\e[19u"}  (deprecated)

Start a @ref{command group}.
This command implicitly does a "fresh line" and ends any
existing command group with the same @var{group-id}.
(The @code{"\e[19u"} variant is equivalent to
an empty @var{group-id} - i.e. @code{"\e]119;\a"}.)
Creates a nested command-group
if there is no existing command group with the same @var{group-id}.

You can write this string before writing an input prompt string.
The @var{content-id} is commonly the process-id of the REPL.

@item @code{"\e]120;"} @var{group-id} @code{"\a"}
(Experimental) Enter a new command-group without closing any current group.

@item @code{"\e]121;"} @var{group-id} @code{"\a"}
(Experimental) Exit the command-group with the given @var{group-id}.

@item @code{"\e]122;"} @var{pattern} @code{"\a"}

Set continuation prompt template.
This is used for non-initial lines in a multi-line input editing area.
The template uses print-style @code{%} escapes to indicate
things to fill out.
It is similar to the one used for JLine.

@item @code{"\e]123;\a"}

Extend previous input line for editing.  Typically used after reading an input
line that is syntactically incomplete, but valid ``so far``.
The previous input is ``re-opened'' for editing, and
a fresh empty line added.

@end table

@subsubsection Urgent messages

@table @asis
@item @code{"\x13"} @code{"\x15"} @var{sequence} @code{"\x14"}
This is an ``out-of-band'' command sequence, which is the
same as @var{sequence}.
However, if the terminal is in the middle of some other escape sequence
(or a multi-byte UTF-8 sequence), save the state,
evaluate @var{sequence}, and restore the state.
@item @code{"\x13"} @code{"\x17"} @var{sequence} @code{"\x14"}
Same as the above, but ''urgent'' (at higher priority):
When DomTerm receives a sequence of bytes that contains
this sequence, it will execute that before handling preceding bytes.

@item @code{"\x13"} @var{sequence} @code{"\x14"}
@itemx @code{"\x13"} @code{"\x16"} @var{sequence} @code{"\x14"}
@emph{These variants are reserved for the domterm backend (server).}
These are similar to the previous variants,
but the @var{sequence} is not counted in the running count
(used for flow control), nor is it included if an output log
is saved (in case it is needed detach+attach).
For the second form only:
When DomTerm receives a sequence of bytes that contains
an urgent sequence, it will execute that before handling preceding bytes.
@end table

@subsubsection Diagnostic (error) messages

@table @asis
@item @code{"\e]44;"} @var{options} @code{"\a"}

Start of a new diagnostic - an error message or similar.
This creates and enters a node @code{<span>} element
with @code{class="diagnostic"}, and @code{info="@var{options}"}.
The @var{options} should be a JSON-formatted object with the
outer @code{@{} and @code{@}} stripped off.
Currently the only @var{options} defined is @code{repl: true} to
indicate this was an error/warning in a previous REPL command.

@item @code{"\e[44;0u"}

End of current diagnostic.  This exits the previously-entered
@code{<span class="diagnostic">}.

@item @code{"\e[44;"} @var{parameter} @code{"u"}

Furure extension, planned for marking start and/or end of specific
parts of a diagnostic.

@end table

@subsubsection Stylesheet manipulation

@table @asis
@item @code{"\e]90;\a"}

A request to return a list of the stylesheets in the document.

Result to client: @code{"\x9D"} @var{stylesheets} @code{"\n"}

Each stylesheet is a JSON-formatted string, separated by @code{"\t"},
suitable for printing by the @code{list-stylesheets} command.

@item @code{"\e]91;"} @var{index} @code{"\a"}
Disable the stylesheet that has index @var{index} in the list of
stylesheets in the document.

Result to client: @code{"\x9D"} @var{message} @code{"\n"}
where @var{message} is empty if there was no problem,
and is otherwise an error message.

@item @code{"\e]92;"} @var{index} @code{"\a"}
As above, but enable the specified stylesheet.

@item @code{"\e]93;"} @var{index} @code{"\a"}
Return the contents of the specified stylesheet.

On success the result is @code{"\x9D"} @var{rule}@sup{*} @code{"\x9D"}
where each is a JSON-quoted string.
On failure, the result is a (non-quoted) error message.

@item @code{"\e]94;"} @var{rule} @code{"\a"}
If necessary, create a new temporary stylesheet,
and add the specified JSON-quoted rule to the end of it.

@item @code{"\e]95;"} @var{name} @code{","} @var{styles} @code{"\a"}
@itemx @code{"\e]96;"} @var{name} @code{","} @var{styles} @code{"\a"}

Create or replace a stylesheet with the given @var{name}.
If there is a @code{<style>} with a @code{name} attribute equal to @var{name},
it is replaced; otherwise a new one is created, with its @code{name} set to @var{name}.
The @var{styles} is the literal contents of the new stylesheet;
it becomes the child of the @code{<style>} element (as a single text node).
Both @var{name} and @var{styles} are strings in quoted (JSON) format.

If the code is @code{96}, no response is sent.
If the code is @code{95}, the result to the client is
@code{"\x9D"} @var{index} @code{"\n"} where @var{index}
is the index of the replaced or created stylesheet.

@end table

@anchor{escapes-pretty-printing}
@subsubsection Pretty-printing

"Pretty-printing" refers to breaking a text info multiple lines
in a way to minimize the number of lines needed while preserving
logical structure and adding helpful indentation.
DomTerm implements the features and concepts
of the @uref{https://dspace.mit.edu/bitstream/handle/1721.1/6503/AIM-1102.pdf,Common Lisp pretty-printing} feature.
The following uses the latter's terminology.
Doing line-breaking in DomTerm means it can
dynamically adjust for varying line width.

@table @asis
@item @code{"\e]110\a"}
@itemx @code{"\e]110;"} @var{per-line-prefix} @code{"\a"}
Start a logical block, followed by sections of the output
that logically belong together, and that DomTerm will
try to group on the same line.
If the group needs to be broken into multiple lines,
continuation lines will be indented to the current horizontal position.

If there is a ``prefix'' before the group,
send it to DomTerm before this command.
On the other hand, if there is a @var{per-line-prefix}
(a JSON-quoted string) it will written both at the current position,
and at the same position in any continuation lines.

@item @code{"\e]111\a"}
End a logical block.
If there is a "suffix", send it to DomTerm after this command.

@item @code{"\e]112;"} @var{amount} @code{"\a"}

Adjust identation of future lines (in the current block).
The @var{amount} is measured in characters, and is relative to the
current position.  A negative @var{amount} is allowed, as long as you
don't end up to the left of any per-line prefixes.

@item @code{"\e]113;"} @var{amount} @code{"\a"}

Similar to the @code{112} command, but @var{amount}
is relative to the start of the current block (after any per-line prefix).

@item @code{"\e]114;"} @var{prefix} @code{"\a"}

Adds an extra per-line prefix for future lines,
specified by @var{prefix}, a JSON-quoted string.

@item @code{"\e]115\a"}

Add a ``fill''-type conditional newline.

@item @code{"\e]116\a"}

Add a ``linear''-type conditional newline.

@item @code{"\e]117\a"}

Add a ``miser''-type conditional newline
(which is currently treated the same as a ``fill'' newline).

@item @code{"\e]118\a"}

A required newline.
This should be used (rather than a plain newline)
when inside a logical-block.

@item @code{"\e]115;"}@var{prebreak}@code{","}@var{postbreak}@code{","}@var{nonbreak} @code{"\a"}
@itemx @code{"\e]116;"}@var{prebreak}@code{","}@var{postbreak}@code{","}@var{nonbreak} @code{"\a"}
@itemx @code{"\e]117;"}@var{prebreak}@code{","}@var{postbreak}@code{","}@var{nonbreak} @code{"\a"}
@itemx @code{"\e]118;"}@var{prebreak}@code{","}@var{postbreak}@code{","}@var{nonbreak} @code{"\a"}

Line-breaks of the types given above, but with specific strings to be used.
Each string is JSON-quoted.
The @var{nonbreak} string is used if the line is not broken here.
If there is a break, the @var{prebreak} string is used before the break,
and the @var{postbreak} string is used after the break (following any indentatioon and per-line prefixes).

For example to insert a hyphenation point, you might
write:
@example
\e]115;"-","",""\a
@end example
German used to have a rule where ``ck'' would be hyphenated as ``k-k'',
as in Zucker (sugar):
@example
Zu\e]115;"-k","k","ck"\aer
@end example
@end table

@subsection Special sequences sent by DomTerm to back-end

The prefix byte 0xFD is used to report an event or other information
from the browser to the server.  The value 0xFD is ``out-of-band''
because it cannot appear when encoding a string to UTF-8.

@table @asis
@item @code{0xFD @var{name} " " @var{data} "\n"}
General format for reporting events,
where @var{name} is the name of the event (an identifier).
The @var{data} can be any text not including a @code{"\n"}
(or other control character); JSON format is used in some cases.

@item @code{0xFD "WS " @var{rows} " " @var{cols} " " @var{height} " " @var{width} "\n"}
Report window size from DomTerm to the back-end.

@item @code{0xFD "KEY " @var{keyname} "\t" @var{seqno} "\t" @var{kchars} "\n"}
Used by auto-line mode to report a key event to back-end.
The @var{keyName} is an encoding of the key event in the
style of @uref{https://github.com/marijnh/browserkeymap,browserkeymap};
@var{kchars} is a string literal (JSON-formatted)
of the characters that are normally transmitted to the back-end.
The @var{seqno} is a sequence number, modulo 1024.
In auto-line mode, if the pty is in canonical mode, then @var{keyName}
is returned to DomTerm (using @code{"\e]74;" @var{keyName} "\t" @var{seqno} "\t" @var{kchars} "\a"});
otherwise @var{kchars} are sent to the pty.

@item @code{0xFD "LINK " @var{ref-info} "\n"}
Sent by the DomTerm browser when the user clicks on an @code{<a>} link.
The @var{ref-info} is a JSON-encoded object with information
about the link. The object must have at least an @code{href} property.
Typically,  backend should open @var{href}
in the default browser of the user's desktop,
though this is contomizable.

@item @code{0xFD "RECEIVED " @var{count} "\n"}
This is used for flow-control.
The @var{count} is the number of bytes received and processed
by the front-end.

@item @code{0xFD "SESSION-NAME " @var{session-name} "\n"}
Set @var{session-name} (a JSON-quoted string)
as the name for this session.

@item @code{0xFD "DETACH\n"}
Don't destroy the session when the last window is closed;
instead detach it.
(Don't necessary detach now, if there are other windows on the session.)

@item @code{0xFD "FOCUSED\n"}
The current (sub-)window has focus.

@item @code{0xFD "WINDOW-CONTENTS " @var{rcount} "," @var{state} "\n"}
Report enough of the browser part of the session state so that
it can be reproduced when a window is sttached to the session.
The @var{state} is a JSON-encoded structure.
The @var{rcount} is similar to the value reported @code{RECEIVED},
but as of the start of the most recent urgent message.

@item @code{0xFD "VERSION " @var{version-info} "\n"}
Sends @var{version-info} to the back-end.  Used during initialization.
@end table

@node The DomTerm JavaScript class
@section The DomTerm JavaScript class

A DomTerm instance encapsulates the
state of a terminal emulator / console.

Functions and properties not documented here should be considered
internal and (more) likely to change.

@deftypefun new DomTerm (@var{name})
Create a new DomTerm instance.
The parameter @var{name} is a string.
If you have multiple DomTerm instances, it is a good idea
for the names to unique, but currently nothing depends on that.
@end deftypefun

@defun initializeTerminal (element)
Initialize the DomTerm, and associate it with the give @var{element}
(which should be a @code{<div>} element that has @code{class="domterm"}).
This creates the @ref{DOM structure,sub-structure} of child elements
of @var{element}.
@end defun

@defun insertString (str)
Interpret and insert the characters of @var{str}.
It may have ANSI/xterm @ref{Wire byte protocol,escape sequences}.
This method is called by the DomTerm client code.
@end defun

@defun eofSeen ()
This method is called by the DomTerm client code
to notify DomTerm that the client has terminated.
The backend repeatedly calls @code{insertString} and then
finally calls @code{eofSeen} to signal end-of-file.

This function may be overridden.
The default action is to call the @code{close} function of the current window.
@end defun

@defun processInputCharacters (str)
Send @var{str} to the client,
where @var{str} consists of typed characters and other events.
This is a callback function that must be set by the client.
This is called by the DomTerm code in @code{terminal.js}.
@end defun

@defun reportEvent (name, data)
Called by DomTerm to notify the client that some (non-character) event happened.
The default action calls @code{processInputCharacter}
with a special sequence starting with @code{0xFD} followed
by the @var{name}, space, the @var{data} and a newline.
@end defun

@defun setWindowSize (numRows, numColumns, availHeight, availWidth)
Called by DomTerm when the window changes size, or the (font) style changes
so the number of rows or columns has changed.
Is used to notify the client.  The default behavior is to
call @code{reportEvent} with a @code{"WS"} event type.
@end defun

@defun doPaste ()
Handles a @code{paste} operation.
May be called by client code.
May also be overridden if needed; the default uses @code{execCommand},
which triggers a @code{paste} event.
It is called by DomTerm if the user types Ctrl-Shift-V.
@end defun

@defun pasteText (text)
Called by the @code{paste} event handler.
Actually handle a paste event.
@end defun

@defun doCopy ()
Handles a @code{copy} operation.
May be called by client code.
May also be overridden if needed; the default uses @code{execCommand}.
It is called by DomTerm if the user types Ctrl-Shift-C.
@end defun

@defun setInputMode (mode)
Set the input editing mode.
The value 99 (@code{'c'}) sets character mode
(each keystroke is sent to the client);
the value 108 (@code{'l')} sets line mode
(local line editing with a complete line sent on enter);
the value 97 (@code{'a'}) sets automatic mode
(switch between line and character modes depending on client pty state);
the value 112 (@code{'p'}) sets pipe mode
(like line mode but with local echoing).
@end defun

@defun doLineEdit (key, str)
Handle keyboard event when doing input line editing ourselves,
rather than depending on the default action.
This is used  if the @code{useDoLineEdit} property is set.
It is also used for the first character in automatic input editing mode.
(In that case we can't use the browser default action, since we
first have to check the input mode of the client.)
@end defun

@defun handleBell ()
Called when ctrl-G (the @code{bell} character) is seen.
The default action is to do nothing.
@end defun

@defun handleLink (event, href)
Called on a click event on a @code{<a>} link element.
The default action is to call @code{preventDefault} on the @var{event},
and then call @code{reportEvent} with an @code{"ALINK"} type event.
(We can't let the browser do its default action since that would
replace the current DomTerm page.)
@end defun

@defun setWindowTitle (title, option)
Set the title of the containing window.
Called by DomTerm when it sees certain @code{xterm}-style escape sequences.
Calls @code{updateWindowTitle(formatWindowTitle())}.
@end defun

@defun formatWindowTitle ()
Returns a suitable string for a window title,
based on various properies.
@end defun

@defun updateWindowTitle (title)
Actualy set the window title - which is usually the
result of @code{formatWindowTitle()}.
@end defun

@defun elementInfo (tag, parents)
Overridable function called by the HTML sanitizer.
@end defun

@defun allowAttribute (name, value elementInfo, parents)
Overridable function called by the HTML sanitizer.
@end defun

@node Processes and security
@section Processes and security

Normally, there is is a single per-user domterm server process.
When you run the @code{domterm} command it will look for a
domterm server process; if there is no running server, the
@code{domterm} command will ``daemonize'' itself and become the server.
Otherwise, the @code{domterm} process will be a client,
and forward the requested action to the server.

Communication between a @code{domterm} client and a server
uses Unix domain sockets.  By default, this socket will
be bound to the file @code{$XDG_RUNTIME_DIR/domterm/default.socket}.
We make use of Unix file permission to
ensure that the client and the server run on behalf of the same user.
(This could be generalized to allow groups to co-operate, by setting
permissions appropriately, but this has not been explored.)

When you run a new session, that creates a new user process,
under control of the domterm server.

The above client-server architecture is same as used by @code{tmux}.

The @dfn{front-end} is a separate program that handles the user interface.
It is a web browser or an application that embeds a web browser, like
Electron.  The domterm server is also a web server that
supports both http and the WebSockets protocols.
The domterm server forwards output from a user process
to the associated browser and vice versa: The server uses a pty
for the input/output of the user process, and forwards that input/output
to the browser using a websocket connection.  Normally, the server
creates a new browser instance, with a specified URL.  When
the corresponding page is loaded, the browser runs JavaScript that requests
a WebSocket connection with the server.

The obvious concern is that a different malicious browser might try
to establish a connection with the server, which would allow executing
arbitrary commands on behalf of the user.  To thwart that, the server
generates a 60-bit random key, and requires this server key to be present
in any connection attempts.  This means the browser JavaScript process
must know the server key when it creates a websocket connection.
The server must pass the key to the browser in a secure way.
A simple way is to pass the key along with the URL used to start
the browser, but that would typically require the key to be
part of the browser's command-line, which is not secure.
(It can can viewed with tools like @code{ps}.)

FIXME - OBSOSLTE:
Instead, the server creates a new file @code{.domterm/default.html}
in the user's home directory, and uses that as the URL:
@example
$ $@{BROWSER@} "file://$@{HOME@}/.domain/default.html"
@end example
This file (only readable by the user) includes the following:
@example
DomTerm.server_key = '$@{SERVER_KEY@}';
@end example
The @code{$@{SERVER_KEY@}} is substituted when the file is created,
and used when the browser needs to make a websocket connection to the
server.
Again, we depend on Unix file permissions so only a process running
as the correct user can read @code{default.html}, extract the
server key, and make a valid connection back to the server.

Obviously, it could be very useful to handle networked connections,
with a browser on one machine managing a user process on another.
While one can always run @code{ssh}, this does not support
detaching from and re-attaching to a session smoothly.
For now, you have to use @code{ssh} in combination with @code{tmux}
or @code{screen}; we hope to have a smoother interface after studying
the issue. It would presumably use forwarding using ssh,
or @code{https}, or a combination.

Some @uref{https://en.wikipedia.org/wiki/Web-based_SSH,related links}

@node Architecture notes
@section Architecture notes

@strong{Some of this is needs to be updated}

@example
            --------------------
 Front-end  |  Display and keyboard
            |---------------
            |  Browser engine (runs terminal.js)
            |---------------
            |  Communication stub
            ---------------
              ^
              | Optional network
              V
            --------------------
  Back-end  |  Communication stub
            |---------------
            |  Application
            ---------------
@end example

The DomTerm architecture allows for multiple front-end
implementations and multiple back-end implementations.
The front-end runs the actual terminal emulator (written in JavaScript)
and manages the display. The front-end can be a window or tab in a
general-purpose browser like Firefox or Chrome, or it can be a
special-purpose browser optimized for DomTerm. The latter would drop
the URL bar, add a menu bar and other controls as more suitable
to a terminal emulator, and tweak a few minor security restrictions.

The back-end runs the actual application.
The application can be a general-purpose shell, or a custom application,
such as a programming language run-time or a chat server.
The back-end can run the application under a PTY.
Alternatively, the application can communicate using pipes,
if you prefer to avoid PTYs or they are unavailable (as on Windows).

The front-end and back-end can be combined in the same process,
using an embeddable browser.
he current @ref{Applications,sample applications}
include a single-process terminal emulator that uses the JavaFX WebEngine,
a JavaFX pop-up menu, and a PTY class.
In this case the ``communication stub'' is WebEngine's
bridge between JavaScript and Java, plus communicating with the PTY.
A C/C++ application could similarly use QtWebEngine
and its C++/JavaScript bridge.

If the front-end and back-end are separate processes, they can
communicate using a byte-stream protocol.
Currently we stick to well-formed UTF8, because JavaScript's
support for byte arrays is still weak.
The protocol is based on the xterm protocol: text and escape sequences
from the application to the front-end; keystrokes and encoded events
sent the other way.  More complex data can be encoded using JSON.
Most of protocol is handled by @code{terminal.js}.
The communications stubs may generate or intercept some messages:
For example a PTY stub will want to handle window size change events.

These data streams can be layered on top of other protocols,
such as telnet, ssh, or WebSocket.
Using WebSocket is convenient because it is built in to modern browsers,
so the entire front-end (except @code{terminal.js})
is readily available.

@subsection Line vs character input modes

In line input mode we can end up with double echoing:
As you edit the input line, it is displayed.
Then when the line is sent, the slave will normally echo the input.

Ideally you'd want to integrate with the kernel
terminal sub-system, to suppress echoing.   In lieu of
that, line editing mode could delete the input line
from the DOM before sending them to the inferior.
To avoid annoying flashing, this is done lazily:
DomTerm waits to remove the input line until it gets some
output from the inferior (usually the echo).

In addition to "char mode" and "line mode" (like the
Emacs term mode) there is an "auto mode" which watches
the states of the inferior pty to automatically switch
between them.  In autoEditing mode, if we're currently
in char mode, then a key event gets sent to the pty layer.
If the pty is in non-canonical mode, the key event is
sent to the server.  If the pty is in canonical mode, then
a message is sent back to the front-end, which switches
to line mode, and processes the event.

@subsection Line structure

"Line" here refer to "visual line": A section of the DOM that should be
treated as a line for cursor movement.  Line breaks may come from the
back-end, or be inserted by the line break algorithm.

The lineStarts array maps from a line number to the DOM location
of the start of the corresponding line.

The lineEnds array maps to the end of each line.
Always points to a span node with the line attribute set.
Normally lineEnds[i] == lineStarts[i+1]; however, sometimes
lineStarts[i] is the start of a @code{<div>} or other block element.

@subsection Colors and high-lighting

@emph{This needs updating.}

Escape sequences (for example @code{"\e[4m"} - "underlined", or
@code{"\e[32m"} - "set foreground color to green") are translated to
<span> elements with "@code{style}" attributes (for example
`<span style="text-decoration:underline">` or `<span style="color: green">`).
After creating such a `<span>` the current position is moved inside it.

If we've previously processed "set foreground color to green", and we
see a request for "underlined" it is easy to ceate a nested `<span>`
for the latter.  But what if we then see "set foreground color to red"?
We don't want to nest <span style="color: red">` inside
<span style="color: green">` - that could lead to some deep and
ugly nesting.  Instead, we move the cursor outside bot existing
spans, and then create new spans for red and underlined.

The `<span>` nodes are created lazily just before characters are
inserted, by `_adjustStyle`, which compares the current active styles
with the desired ones (set by `_pushStyle`).

A possibly better approach would be to match each highlight style into
a `class` attribute (for example `green-foreground-style` and
`underlined-style`).  A default stylesheet can map each style class to
the correspoding CSS rules.  This has the advantage that one could
override the highlighting appearance with a custom style sheet.

@subsection Predictive echo

@uref{https://mosh.org/,Mosh} implements local ``tentative echo'', which
makes network latency less a problem.
DomTerm implements this leveraging the ``deferred deletion''
mechanism (used for line mode echo).

To do this we use a @code{<span>} that contains predicted input:
an optional text node, the @code{_caretNode}, and an optional text node.
The node has 3 additional properties: @code{textBefore}, @code{textAfter},
and @code{pendingEcho}.  When output arrives from the server,
the function @code{_doDeferredDeletion} is called,
which replaces the span by the @code{textBefore} and @code{textAfter},
with the @code{_caretNode} in between; this is ``real'' (confirmed) output,
before processing the new output.
We also @code{_doDeferredDeletion} when unable to do echo predication.

Handling keyboard input is as follows:
First, if @code{_deferredForDeletion} is null, we set it to a fresh span
that wraps the @code{_caretNode}.
As needed,  any text node immediately before or after can be moved
into the @code{_deferredForDeletion} span, also setting @code{textBefore}
and  @code{textAfter}.
Then, for a printing character, we insert it before the caret,
and append it to @code{pendingEcho}.
For left or right arrow, delete, or backspace, if possible we adjust the
@code{_deferredForDeletion} span appropriately,
and add a special code to @code{pendingEcho}.
If not possible, we @code{_doDeferredDeletion}, which we
also do for other keys.

Calling @code{_doDeferredDeletion} just before handling output
is correct but suboptimal if the output only contains part
of the pending echo.
In that case we try to create (after handling output) a new
@code{_deferredForDeletion} span, whose @code{pendingEcho} string
is a tail of the previous value.
(We only do this if there are no changes to any other (logical) line.)

@subsection Line-breaking / pretty-printing

For a terminal emulator we need to preserve (not collapse) whitespace,
and (usually) we want to line-break in the middle of a word.

These CSS properties come close:
@example
white-space: pre-wrap; word-break: break-all
@end example
This is simple and fast.  However:
@itemize
@item
It doesn't help in inserting a visual indicator, like Emacs's arrow,
  to indicate when a line was broken.
@item
It doesn't help managing the line table.
@item
It doesn't help with pretty-printing (for example grouping).
@item
Chrome (version 52) seems to have from problems with @code{break-all}.
@end itemize

Hence we need to do the job ourselves.

@node Credits
@chapter Credits and thanks

DomTerm is implemented by Per Bothner, but
makes use of multiple libraries and tools.

The back-end uses Andy Green's @uref{https://libwebsockets.org/,libwebsockets}
for its http and websockets server and event polling library.

The C back-end was based on Shuanglei Tao's @uref{https://github.com/tsl0922/ttyd,ttyd}.

An older version of the back-end was Java-based.
It made use of @uref{https://github.com/TooTallNate/Java-WebSocket/,Java WebSockets}.
This is no longer supported, but a simplified Java server is still supported.
It uses @code{XMLHttpRequest} (``ajax'') and the @code{com.sun.net.httpserver.HttpServer}
bundled with JSK.

The older @uref{https://github.com/PerBothner/JWebTerminal,JWebTerminal} project
was based on similar ideas as DomTerm, but was mostly written in Java using
@uref{https://docs.oracle.com/javafx/2/webview/jfxpub-webview.htm, Javafx WebView}.
Some optional Java code (not used by the default @code{domterm} command),
including a JavaFX embedding, 
was written while I worked at Oracle, and is copyright Oracle.

@uref{https://golden-layout.com/,GoldenLayout} provides tiling and tabs.

Menubar and context (popup) menus on ``generic'' platforms
(i.e. not Electron, Atom, or Qt) are implemented using
@uref{https://github.com/PerBothner/jsMenus,jsMenus}, which is
based on Sam Wray's @uref{https://github.com/2xAA/nwjs-menu-browser, nwjs-menu-browser} library.

The @uref{https://github.com/sindresorhus/screenfull.js/,screenfull.js} library
by Sindre Sorhus is provides a browser-independent wrapper for entering and exiting Full Screen.

ResizeSensor is used to watch when a DomTerm window or sub-window is re-sized.
It is part of  Marc J. Schmidt's
@uref{https://github.com/marcj/css-element-queries,CSS Element Queries}.

Marijn Haverbeke's @uref{https://github.com/marijnh/browserkeymap,Browser Keymap} package
provides a simple key-binding manager.

Gregory Pakosz's @uref{https://github.com/gpakosz/whereami,Where Am I?} library
is used to get the absolute path for the current @code{domterm} executable.

Eli Gray's @uref{https://github.com/eligrey/FileSaver.js/,FileSaver.js} is
for the ``Save as HTML'' feature.

The wcwidth library (used to determine which characers are ``double-width'')
has a convoluted history - see the source code.  It has been re-factored
somewhat for DomTerm.

Reading Sixel images uses the @uref{https://github.com/jerch/node-sixel,@code{node-sixel}} library
written by Jörg ``Jerch'' Breitbart.

The Python tools were largely inspired or based on similar tools
in @uref{https://github.com/mitotic/graphterm,GraphTerm},
written by R. Saravanan (who also wrote the older XMLTerm,
which was a big inspiration).
