/* Styling that is required for DomTerm to work sanely.
 * "True" optional styling should go in domterm-default.css.
 */
span.tail-hider { position: absolute; right: 0px; bottom: 0px }
span.tail-hider[domterm-hiding="true"]:before {content: "\25B6" }
span.tail-hider:before {content: "\25BC" }
div.input-line { position: relative }

html, body { width: 100%; height: 100%; margin: 0px; overflow: hidden }
div.domterm { -webkit-user-select: text }
div.domterm { width: 100%; height: 100%; overflow-y: scroll; overflow-x: hidden; margin: 0px; padding: 0px; border: 0px }
div.domterm.xterm { overflow-y: hidden }
div.domterm.domterm-noscript { word-break: break-all }
pre { padding: 0px; margin: 0px; }
/* NOTE: If .domterm is not the top-level element, it should
 *  be nested in a div with style="position: relative", so
 * .domterm-show-info's position: absolute works.  Setting position: relative
 * in the .domterm element doesn't work if we're scrolled. */
div.domterm-show-info {
    position: fixed;
    z-index: 100;
    background-color: inherit
}
div.domterm-pre span.wc-node {
    display: inline-block;
    text-align: center;
    width: var(--wchar-width);
}
/* FUTURE POPUP
div.domterm-main-popup {
    position: fixed;
    z-index: 100;
    background-color: inherit
}
*/
/* We use <div class="domterm-pre"> instead of <pre> for regular terminal lines.
 * The reason is that <Copy> on some browsers adds *two* newlines between adjacent
 * <pre> nodes.  This appears intentional, as it matches the new innerText spec.
 * FIXME The downside with not using <pre> is that "copy-as-HTML" becomes
 * less useful (without stylesheets). So we should either use <pre> and then
 * fix up the extra newline on copy-to-HTML; or copy-to-HTML should convert
 * the  <div class="domterm-pre"> to a <pre> node.
 */
div.domterm-pre {
    padding: 0px; margin: 0px; font-family: monospace;
    unicode-bidi: embed; white-space: pre }
div.domterm-pre { display: block; }
div.domterm-pre[domterm-hidden="true"] { display: none; visibility: hidden  }
div.domterm.domterm-noscript div.domterm-pre { white-space: pre-wrap }
span[class="wrap"] {padding: 0px; margin: 0px; white-space: nowrap }
span { padding: 0px; margin: 0px;}
span[line="soft"] { padding: 0px; margin: 0px;}
span[std="prompt"] { margin: 0px; padding: 0px; border: 0px }
span[std="prompt"][value]:before { content: attr(value) }
*[domterm-hidden="true"] { display: none }

span[line][breaking="yes"]:before {content: "\A"; }
span.indentation[value]:after { content: attr(value); }
span[line][breaking="always"][pre-break]:before {content: attr(pre-break); }
span[line][breaking="yes"][pre-break]:before {content: attr(pre-break) "\A"; }
span[line][breaking="yes"][post-break]:after {content: attr(post-break) }

/* If breaking="yes" then either: there must be a pre-break attribute;
   or there must be a <span class="pprint-pre-break"> child;
   or line="soft". */
span[line][breaking="yes"] > span.pprint-non-break { display: none }
span[line][breaking="yes"] > span.pprint-pre-break { display: inline }
span[line][breaking="yes"] > span.pprint-pre-break :after { content: "\A" }
span[line] > span.pprint-pre-break { display: none }
span[line][breaking="yes"] > span.pprint-post-break { display: inline }
span[line] > span.pprint-post-break { display: none }
span.pprint-indentation[value]:before { content: attr(value); }
